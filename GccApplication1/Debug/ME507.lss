
ME507.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da9  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  00001145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cf  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010602  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000342  00000000  00000000  00012a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00012de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003893  00000000  00000000  00012e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_18>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_30>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ac 30       	cpi	r26, 0x0C	; 12
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  c2:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
  ca:	08 95       	ret

000000cc <__vector_18>:
 *  This interrupt service routine runs whenever a character has been received by the
 *  first serial port (number 0).  It saves that character into the receiver buffer.
 */

ISR (RSI_CHAR_RECV_INT_0)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	#if defined UCSR0A  // If this is a dual-serial-port chip (ATmega324P, 128, etc.)
		rcv0_buffer[rcv0_write_index] = UDR0;
  e2:	2c b1       	in	r18, 0x0c	; 12
  e4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <rcv0_buffer>
  e8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <rcv0_buffer+0x1>
  ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rcv0_write_index>
  f0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rcv0_write_index+0x1>
  f4:	e8 0f       	add	r30, r24
  f6:	f9 1f       	adc	r31, r25
  f8:	20 83       	st	Z, r18
	#else  // If this chip has only a single serial port (ATmega8, 32, etc.)
		rcv0_buffer[rcv0_write_index] = UDR;
	#endif

	// Increment the write pointer
	if (++rcv0_write_index >= RSINT_BUF_SIZE)
  fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rcv0_write_index>
  fe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rcv0_write_index+0x1>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	80 32       	cpi	r24, 0x20	; 32
 106:	91 05       	cpc	r25, r1
 108:	60 f4       	brcc	.+24     	; 0x122 <__vector_18+0x56>
 10a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <rcv0_write_index+0x1>
 10e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rcv0_write_index>
		rcv0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcv0_write_index == rcv0_read_index)
 112:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rcv0_read_index>
 116:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rcv0_read_index+0x1>
 11a:	82 17       	cp	r24, r18
 11c:	93 07       	cpc	r25, r19
 11e:	f1 f4       	brne	.+60     	; 0x15c <__vector_18+0x90>
 120:	0c c0       	rjmp	.+24     	; 0x13a <__vector_18+0x6e>
		rcv0_buffer[rcv0_write_index] = UDR;
	#endif

	// Increment the write pointer
	if (++rcv0_write_index >= RSINT_BUF_SIZE)
		rcv0_write_index = 0;
 122:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rcv0_write_index+0x1>
 126:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rcv0_write_index>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcv0_write_index == rcv0_read_index)
 12a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rcv0_read_index>
 12e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <rcv0_read_index+0x1>
 132:	18 16       	cp	r1, r24
 134:	19 06       	cpc	r1, r25
 136:	91 f4       	brne	.+36     	; 0x15c <__vector_18+0x90>
 138:	0e c0       	rjmp	.+28     	; 0x156 <__vector_18+0x8a>
		if (++rcv0_read_index >= RSINT_BUF_SIZE)
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	80 32       	cpi	r24, 0x20	; 32
 13e:	91 05       	cpc	r25, r1
 140:	28 f4       	brcc	.+10     	; 0x14c <__vector_18+0x80>
 142:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <rcv0_read_index+0x1>
 146:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rcv0_read_index>
 14a:	08 c0       	rjmp	.+16     	; 0x15c <__vector_18+0x90>
			rcv0_read_index = 0;
 14c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rcv0_read_index+0x1>
 150:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rcv0_read_index>
}
 154:	03 c0       	rjmp	.+6      	; 0x15c <__vector_18+0x90>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcv0_write_index == rcv0_read_index)
		if (++rcv0_read_index >= RSINT_BUF_SIZE)
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	f3 cf       	rjmp	.-26     	; 0x142 <__vector_18+0x76>
			rcv0_read_index = 0;
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_30>:
	/** This interrupt service routine runs whenever a character has been received by the
	*  first serial port (number 0).  It saves that character into the receiver buffer.
	*/

	ISR (RSI_CHAR_RECV_INT_1)
	{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
		// Read the character from the serial port receiver buffer
		rcv1_buffer[rcv1_write_index] = UDR1;
 188:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 18c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <rcv1_buffer>
 190:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <rcv1_buffer+0x1>
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 198:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 19c:	e8 0f       	add	r30, r24
 19e:	f9 1f       	adc	r31, r25
 1a0:	20 83       	st	Z, r18

		// Increment the write pointer
		if (++rcv1_write_index >= RSINT_BUF_SIZE)
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	80 32       	cpi	r24, 0x20	; 32
 1ae:	91 05       	cpc	r25, r1
 1b0:	60 f4       	brcc	.+24     	; 0x1ca <__vector_30+0x58>
 1b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			rcv1_write_index = 0;

		// If the write pointer is now equal to the read pointer, that means we've just
		// overwritten the oldest data. Increment the read pointer so that it doesn't seem
		// as if the buffer is empty
		if (rcv1_write_index == rcv1_read_index)
 1ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <rcv1_read_index>
 1be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <rcv1_read_index+0x1>
 1c2:	82 17       	cp	r24, r18
 1c4:	93 07       	cpc	r25, r19
 1c6:	f1 f4       	brne	.+60     	; 0x204 <__vector_30+0x92>
 1c8:	0c c0       	rjmp	.+24     	; 0x1e2 <__vector_30+0x70>
		// Read the character from the serial port receiver buffer
		rcv1_buffer[rcv1_write_index] = UDR1;

		// Increment the write pointer
		if (++rcv1_write_index >= RSINT_BUF_SIZE)
			rcv1_write_index = 0;
 1ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 1ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>

		// If the write pointer is now equal to the read pointer, that means we've just
		// overwritten the oldest data. Increment the read pointer so that it doesn't seem
		// as if the buffer is empty
		if (rcv1_write_index == rcv1_read_index)
 1d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rcv1_read_index>
 1d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rcv1_read_index+0x1>
 1da:	18 16       	cp	r1, r24
 1dc:	19 06       	cpc	r1, r25
 1de:	91 f4       	brne	.+36     	; 0x204 <__vector_30+0x92>
 1e0:	0e c0       	rjmp	.+28     	; 0x1fe <__vector_30+0x8c>
			if (++rcv1_read_index >= RSINT_BUF_SIZE)
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	80 32       	cpi	r24, 0x20	; 32
 1e6:	91 05       	cpc	r25, r1
 1e8:	28 f4       	brcc	.+10     	; 0x1f4 <__vector_30+0x82>
 1ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rcv1_read_index+0x1>
 1ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rcv1_read_index>
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <__vector_30+0x92>
				rcv1_read_index = 0;
 1f4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rcv1_read_index+0x1>
 1f8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <rcv1_read_index>
	}
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <__vector_30+0x92>

		// If the write pointer is now equal to the read pointer, that means we've just
		// overwritten the oldest data. Increment the read pointer so that it doesn't seem
		// as if the buffer is empty
		if (rcv1_write_index == rcv1_read_index)
			if (++rcv1_read_index >= RSINT_BUF_SIZE)
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	f3 cf       	rjmp	.-26     	; 0x1ea <__vector_30+0x78>
				rcv1_read_index = 0;
	}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <main>:
#include <avr/io.h>
#include <asf.h>

int main(void)
{
	board_init();
 21a:	0e 94 65 00 	call	0xca	; 0xca <board_init>

	uint8_t counter = 0;
 21e:	80 e0       	ldi	r24, 0x00	; 0
	
	while (1) 
    {
		counter++;
 220:	8f 5f       	subi	r24, 0xFF	; 255
		PORTE = counter;
 222:	83 b9       	out	0x03, r24	; 3
 224:	fd cf       	rjmp	.-6      	; 0x220 <main+0x6>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
