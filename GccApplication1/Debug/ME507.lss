
ME507.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001d24  00001db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000afe  00800122  00800122  00001dda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041c9  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b09  00000000  00000000  00006449  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ddb  00000000  00000000  00007f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef4  00000000  00000000  0000ad30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000cd4e  00000000  00000000  0000bc24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ed8  00000000  00000000  00018972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  0001a84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000643  00000000  00000000  0001abda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_26>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_30>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e2       	ldi	r30, 0x24	; 36
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 32       	cpi	r26, 0x22	; 34
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	2c e0       	ldi	r18, 0x0C	; 12
      b0:	a2 e2       	ldi	r26, 0x22	; 34
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a0 32       	cpi	r26, 0x20	; 32
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <main>
      c2:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <_ZN11fifth_wheelC1EPKchjP8emstreamP17semi_truck_data_tPVjh>:
#define LOCKED_LEVEL 1      //todo: NEED TO REPLACE VALUES WHEN TESTING WITH SERVOS
#define UNLOCKED_LEVEL 2



fifth_wheel::fifth_wheel(const char *a_name, unsigned char a_priority, size_t a_stack_size, emstream *p_ser_dev,
      ca:	af 92       	push	r10
      cc:	cf 92       	push	r12
      ce:	df 92       	push	r13
      d0:	ef 92       	push	r14
      d2:	ff 92       	push	r15
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	2e 97       	sbiw	r28, 0x0e	; 14
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	f8 94       	cli
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	cd bf       	out	0x3d, r28	; 61
      ec:	9a 83       	std	Y+2, r25	; 0x02
      ee:	89 83       	std	Y+1, r24	; 0x01
      f0:	7c 83       	std	Y+4, r23	; 0x04
      f2:	6b 83       	std	Y+3, r22	; 0x03
      f4:	4d 83       	std	Y+5, r20	; 0x05
      f6:	3f 83       	std	Y+7, r19	; 0x07
      f8:	2e 83       	std	Y+6, r18	; 0x06
      fa:	19 87       	std	Y+9, r17	; 0x09
      fc:	08 87       	std	Y+8, r16	; 0x08
      fe:	fb 86       	std	Y+11, r15	; 0x0b
     100:	ea 86       	std	Y+10, r14	; 0x0a
     102:	dd 86       	std	Y+13, r13	; 0x0d
     104:	cc 86       	std	Y+12, r12	; 0x0c
     106:	ae 86       	std	Y+14, r10	; 0x0e
                         semi_truck_data_t *semi_data_in, volatile uint16_t *oc_reg, uint8_t ddr_pin_in)
		: servo::servo(oc_reg, ddr_pin_in),
		TaskBase::TaskBase(a_name, a_priority, a_stack_size, p_ser_dev)
     108:	89 81       	ldd	r24, Y+1	; 0x01
     10a:	9a 81       	ldd	r25, Y+2	; 0x02
     10c:	42 96       	adiw	r24, 0x12	; 18
     10e:	2c 85       	ldd	r18, Y+12	; 0x0c
     110:	3d 85       	ldd	r19, Y+13	; 0x0d
     112:	4e 85       	ldd	r20, Y+14	; 0x0e
     114:	b9 01       	movw	r22, r18
     116:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_ZN5servoC1EPVjh>
     11a:	89 81       	ldd	r24, Y+1	; 0x01
     11c:	9a 81       	ldd	r25, Y+2	; 0x02
     11e:	48 85       	ldd	r20, Y+8	; 0x08
     120:	59 85       	ldd	r21, Y+9	; 0x09
     122:	2e 81       	ldd	r18, Y+6	; 0x06
     124:	3f 81       	ldd	r19, Y+7	; 0x07
     126:	6b 81       	ldd	r22, Y+3	; 0x03
     128:	7c 81       	ldd	r23, Y+4	; 0x04
     12a:	8a 01       	movw	r16, r20
     12c:	4d 81       	ldd	r20, Y+5	; 0x05
     12e:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN8TaskBaseC1EPKchjP8emstream>
     132:	26 e1       	ldi	r18, 0x16	; 22
     134:	31 e0       	ldi	r19, 0x01	; 1
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	9a 81       	ldd	r25, Y+2	; 0x02
     13a:	fc 01       	movw	r30, r24
     13c:	31 83       	std	Z+1, r19	; 0x01
     13e:	20 83       	st	Z, r18
{
	semi_data = semi_data_in;
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	2a 85       	ldd	r18, Y+10	; 0x0a
     146:	3b 85       	ldd	r19, Y+11	; 0x0b
     148:	fc 01       	movw	r30, r24
     14a:	30 8f       	std	Z+24, r19	; 0x18
     14c:	27 8b       	std	Z+23, r18	; 0x17
    state = LOCKED; // fifth wheel starts out locked
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	fc 01       	movw	r30, r24
     156:	21 8f       	std	Z+25, r18	; 0x19
}
     158:	00 00       	nop
     15a:	2e 96       	adiw	r28, 0x0e	; 14
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	de bf       	out	0x3e, r29	; 62
     162:	0f be       	out	0x3f, r0	; 63
     164:	cd bf       	out	0x3d, r28	; 61
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	df 90       	pop	r13
     174:	cf 90       	pop	r12
     176:	af 90       	pop	r10
     178:	08 95       	ret

0000017a <_ZN11fifth_wheel3runEv>:

void fifth_wheel::run()
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	00 d0       	rcall	.+0      	; 0x180 <_ZN11fifth_wheel3runEv+0x6>
     180:	00 d0       	rcall	.+0      	; 0x182 <_ZN11fifth_wheel3runEv+0x8>
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	9c 83       	std	Y+4, r25	; 0x04
     188:	8b 83       	std	Y+3, r24	; 0x03
    lock_servo();
     18a:	8b 81       	ldd	r24, Y+3	; 0x03
     18c:	9c 81       	ldd	r25, Y+4	; 0x04
     18e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN11fifth_wheel10lock_servoEv>
    state = LOCKED; // fifth wheel starts out locked
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	9c 81       	ldd	r25, Y+4	; 0x04
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	fc 01       	movw	r30, r24
     19a:	21 8f       	std	Z+25, r18	; 0x19
	volatile int counter = 0;
     19c:	1a 82       	std	Y+2, r1	; 0x02
     19e:	19 82       	std	Y+1, r1	; 0x01
    for (;;) {
		//write(0);
        if (state == LOCKED) {
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	9c 81       	ldd	r25, Y+4	; 0x04
     1a4:	fc 01       	movw	r30, r24
     1a6:	81 8d       	ldd	r24, Z+25	; 0x19
     1a8:	88 23       	and	r24, r24
     1aa:	a1 f0       	breq	.+40     	; 0x1d4 <_ZN11fifth_wheel3runEv+0x5a>
            if (semi_data->desired_5th == UNLOCKED) {
     1ac:	8b 81       	ldd	r24, Y+3	; 0x03
     1ae:	9c 81       	ldd	r25, Y+4	; 0x04
     1b0:	fc 01       	movw	r30, r24
     1b2:	87 89       	ldd	r24, Z+23	; 0x17
     1b4:	90 8d       	ldd	r25, Z+24	; 0x18
     1b6:	fc 01       	movw	r30, r24
     1b8:	94 85       	ldd	r25, Z+12	; 0x0c
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	89 27       	eor	r24, r25
     1be:	88 23       	and	r24, r24
     1c0:	79 f3       	breq	.-34     	; 0x1a0 <_ZN11fifth_wheel3runEv+0x26>
                unlock_servo();
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	9c 81       	ldd	r25, Y+4	; 0x04
     1c6:	0e 94 3d 01 	call	0x27a	; 0x27a <_ZN11fifth_wheel12unlock_servoEv>
                state = UNLOCKED;
     1ca:	8b 81       	ldd	r24, Y+3	; 0x03
     1cc:	9c 81       	ldd	r25, Y+4	; 0x04
     1ce:	fc 01       	movw	r30, r24
     1d0:	11 8e       	std	Z+25, r1	; 0x19
     1d2:	e6 cf       	rjmp	.-52     	; 0x1a0 <_ZN11fifth_wheel3runEv+0x26>
            }
        }

        else if (state == UNLOCKED) {
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	9c 81       	ldd	r25, Y+4	; 0x04
     1d8:	fc 01       	movw	r30, r24
     1da:	91 8d       	ldd	r25, Z+25	; 0x19
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	89 27       	eor	r24, r25
     1e0:	88 23       	and	r24, r24
     1e2:	99 f0       	breq	.+38     	; 0x20a <_ZN11fifth_wheel3runEv+0x90>
            if (semi_data->desired_5th == LOCKED) {
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	9c 81       	ldd	r25, Y+4	; 0x04
     1e8:	fc 01       	movw	r30, r24
     1ea:	87 89       	ldd	r24, Z+23	; 0x17
     1ec:	90 8d       	ldd	r25, Z+24	; 0x18
     1ee:	fc 01       	movw	r30, r24
     1f0:	84 85       	ldd	r24, Z+12	; 0x0c
     1f2:	88 23       	and	r24, r24
     1f4:	a9 f2       	breq	.-86     	; 0x1a0 <_ZN11fifth_wheel3runEv+0x26>
                lock_servo();
     1f6:	8b 81       	ldd	r24, Y+3	; 0x03
     1f8:	9c 81       	ldd	r25, Y+4	; 0x04
     1fa:	0e 94 21 01 	call	0x242	; 0x242 <_ZN11fifth_wheel10lock_servoEv>
                state = LOCKED;
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	fc 01       	movw	r30, r24
     206:	21 8f       	std	Z+25, r18	; 0x19
     208:	cb cf       	rjmp	.-106    	; 0x1a0 <_ZN11fifth_wheel3runEv+0x26>
            }
        }

        else {                      // should not ever be in a state other than 1 or 2
            print_status(*p_serial);
     20a:	8b 81       	ldd	r24, Y+3	; 0x03
     20c:	9c 81       	ldd	r25, Y+4	; 0x04
     20e:	fc 01       	movw	r30, r24
     210:	80 81       	ld	r24, Z
     212:	91 81       	ldd	r25, Z+1	; 0x01
     214:	02 96       	adiw	r24, 0x02	; 2
     216:	fc 01       	movw	r30, r24
     218:	20 81       	ld	r18, Z
     21a:	31 81       	ldd	r19, Z+1	; 0x01
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	fc 01       	movw	r30, r24
     222:	46 81       	ldd	r20, Z+6	; 0x06
     224:	57 81       	ldd	r21, Z+7	; 0x07
     226:	8b 81       	ldd	r24, Y+3	; 0x03
     228:	9c 81       	ldd	r25, Y+4	; 0x04
     22a:	ba 01       	movw	r22, r20
     22c:	f9 01       	movw	r30, r18
     22e:	09 95       	icall
            break;
     230:	00 00       	nop
        }
		//delay_ms(5);
    }
}
     232:	00 00       	nop
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <_ZN11fifth_wheel10lock_servoEv>:

void fifth_wheel::lock_servo()
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <_ZN11fifth_wheel10lock_servoEv+0x6>
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	9a 83       	std	Y+2, r25	; 0x02
     24e:	89 83       	std	Y+1, r24	; 0x01
    write(LOCKED_LEVEL);
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	42 96       	adiw	r24, 0x12	; 18
     256:	61 e0       	ldi	r22, 0x01	; 1
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN5servo5writeEi>
    semi_data->actual_5th = LOCKED;
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	9a 81       	ldd	r25, Y+2	; 0x02
     262:	fc 01       	movw	r30, r24
     264:	87 89       	ldd	r24, Z+23	; 0x17
     266:	90 8d       	ldd	r25, Z+24	; 0x18
     268:	21 e0       	ldi	r18, 0x01	; 1
     26a:	fc 01       	movw	r30, r24
     26c:	25 87       	std	Z+13, r18	; 0x0d
}
     26e:	00 00       	nop
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <_ZN11fifth_wheel12unlock_servoEv>:

void fifth_wheel::unlock_servo()
{
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	00 d0       	rcall	.+0      	; 0x280 <_ZN11fifth_wheel12unlock_servoEv+0x6>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	9a 83       	std	Y+2, r25	; 0x02
     286:	89 83       	std	Y+1, r24	; 0x01
    write(UNLOCKED_LEVEL);
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	9a 81       	ldd	r25, Y+2	; 0x02
     28c:	42 96       	adiw	r24, 0x12	; 18
     28e:	62 e0       	ldi	r22, 0x02	; 2
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN5servo5writeEi>
    semi_data->actual_5th = UNLOCKED;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	fc 01       	movw	r30, r24
     29c:	87 89       	ldd	r24, Z+23	; 0x17
     29e:	90 8d       	ldd	r25, Z+24	; 0x18
     2a0:	fc 01       	movw	r30, r24
     2a2:	15 86       	std	Z+13, r1	; 0x0d
}
     2a4:	00 00       	nop
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <_ZN5servoC1EPVjh>:
#include "servo.h"

servo::servo(volatile uint16_t *oc_reg, uint8_t ddr_pin)
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <_ZN5servoC1EPVjh+0x6>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_ZN5servoC1EPVjh+0x8>
     2b8:	1f 92       	push	r1
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62
     2be:	9a 83       	std	Y+2, r25	; 0x02
     2c0:	89 83       	std	Y+1, r24	; 0x01
     2c2:	7c 83       	std	Y+4, r23	; 0x04
     2c4:	6b 83       	std	Y+3, r22	; 0x03
     2c6:	4d 83       	std	Y+5, r20	; 0x05
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	27 e3       	ldi	r18, 0x37	; 55
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	fc 01       	movw	r30, r24
     2d2:	33 83       	std	Z+3, r19	; 0x03
     2d4:	22 83       	std	Z+2, r18	; 0x02
{
	out_comp_reg = oc_reg; // set the given output compare register for the servo, which handles pwm duty cycle
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	9a 81       	ldd	r25, Y+2	; 0x02
     2da:	2b 81       	ldd	r18, Y+3	; 0x03
     2dc:	3c 81       	ldd	r19, Y+4	; 0x04
     2de:	fc 01       	movw	r30, r24
     2e0:	31 83       	std	Z+1, r19	; 0x01
     2e2:	20 83       	st	Z, r18
    *ddr_reg |= (1 << ddr_pin); // sets the servo object's ddr pin to be output enabled
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	fc 01       	movw	r30, r24
     2ea:	82 81       	ldd	r24, Z+2	; 0x02
     2ec:	93 81       	ldd	r25, Z+3	; 0x03
     2ee:	29 81       	ldd	r18, Y+1	; 0x01
     2f0:	3a 81       	ldd	r19, Y+2	; 0x02
     2f2:	f9 01       	movw	r30, r18
     2f4:	22 81       	ldd	r18, Z+2	; 0x02
     2f6:	33 81       	ldd	r19, Z+3	; 0x03
     2f8:	f9 01       	movw	r30, r18
     2fa:	20 81       	ld	r18, Z
     2fc:	62 2f       	mov	r22, r18
     2fe:	2d 81       	ldd	r18, Y+5	; 0x05
     300:	42 2f       	mov	r20, r18
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	02 c0       	rjmp	.+4      	; 0x30e <_ZN5servoC1EPVjh+0x5e>
     30a:	22 0f       	add	r18, r18
     30c:	33 1f       	adc	r19, r19
     30e:	4a 95       	dec	r20
     310:	e2 f7       	brpl	.-8      	; 0x30a <_ZN5servoC1EPVjh+0x5a>
     312:	26 2b       	or	r18, r22
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
}
     318:	00 00       	nop
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <_ZN5servo5writeEi>:


void servo::write(int value)
{
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	00 d0       	rcall	.+0      	; 0x330 <_ZN5servo5writeEi+0x6>
     330:	00 d0       	rcall	.+0      	; 0x332 <_ZN5servo5writeEi+0x8>
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	9a 83       	std	Y+2, r25	; 0x02
     338:	89 83       	std	Y+1, r24	; 0x01
     33a:	7c 83       	std	Y+4, r23	; 0x04
     33c:	6b 83       	std	Y+3, r22	; 0x03
	(*out_comp_reg)++;
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	9a 81       	ldd	r25, Y+2	; 0x02
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	91 81       	ldd	r25, Z+1	; 0x01
     348:	fc 01       	movw	r30, r24
     34a:	20 81       	ld	r18, Z
     34c:	31 81       	ldd	r19, Z+1	; 0x01
     34e:	2f 5f       	subi	r18, 0xFF	; 255
     350:	3f 4f       	sbci	r19, 0xFF	; 255
     352:	fc 01       	movw	r30, r24
     354:	31 83       	std	Z+1, r19	; 0x01
     356:	20 83       	st	Z, r18
    else if( value > SERVO_MAX ) {
		value = SERVO_MAX;
	}
	*out_comp_reg = value; // writes the end value to the servo's output compare register for PWM control
	*/
}
     358:	00 00       	nop
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN8emstream4putsEPKc>:
 *           character, \c '\0') is reached.
 *  @param   p_string A pointer to the string which is to be printed
 */

void emstream::puts (const char* p_string)
{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <_ZN8emstream4putsEPKc+0x6>
     36e:	00 d0       	rcall	.+0      	; 0x370 <_ZN8emstream4putsEPKc+0x8>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	9a 83       	std	Y+2, r25	; 0x02
     376:	89 83       	std	Y+1, r24	; 0x01
     378:	7c 83       	std	Y+4, r23	; 0x04
     37a:	6b 83       	std	Y+3, r22	; 0x03
		{
			putchar (*p_string++);
		}
	}
	*/
}
     37c:	00 00       	nop
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	2e 97       	sbiw	r28, 0x0e	; 14
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	9e 87       	std	Y+14, r25	; 0x0e
     3a2:	8d 87       	std	Y+13, r24	; 0x0d
     3a4:	1e 82       	std	Y+6, r1	; 0x06
     3a6:	1d 82       	std	Y+5, r1	; 0x05
     3a8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <vTaskSuspendAll>
     3ac:	80 91 a2 0b 	lds	r24, 0x0BA2	; 0x800ba2 <xHeapHasBeenInitialised.1989>
     3b0:	88 23       	and	r24, r24
     3b2:	29 f4       	brne	.+10     	; 0x3be <pvPortMalloc+0x32>
     3b4:	0e 94 27 03 	call	0x64e	; 0x64e <prvHeapInit>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 a2 0b 	sts	0x0BA2, r24	; 0x800ba2 <xHeapHasBeenInitialised.1989>
     3be:	8d 85       	ldd	r24, Y+13	; 0x0d
     3c0:	9e 85       	ldd	r25, Y+14	; 0x0e
     3c2:	89 2b       	or	r24, r25
     3c4:	41 f0       	breq	.+16     	; 0x3d6 <pvPortMalloc+0x4a>
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	2d 85       	ldd	r18, Y+13	; 0x0d
     3cc:	3e 85       	ldd	r19, Y+14	; 0x0e
     3ce:	82 0f       	add	r24, r18
     3d0:	93 1f       	adc	r25, r19
     3d2:	9e 87       	std	Y+14, r25	; 0x0e
     3d4:	8d 87       	std	Y+13, r24	; 0x0d
     3d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     3da:	89 2b       	or	r24, r25
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <pvPortMalloc+0x54>
     3de:	b8 c0       	rjmp	.+368    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     3e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     3e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     3e4:	87 37       	cpi	r24, 0x77	; 119
     3e6:	9a 40       	sbci	r25, 0x0A	; 10
     3e8:	08 f0       	brcs	.+2      	; 0x3ec <pvPortMalloc+0x60>
     3ea:	b2 c0       	rjmp	.+356    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     3ec:	8a e9       	ldi	r24, 0x9A	; 154
     3ee:	9b e0       	ldi	r25, 0x0B	; 11
     3f0:	9c 83       	std	Y+4, r25	; 0x04
     3f2:	8b 83       	std	Y+3, r24	; 0x03
     3f4:	80 91 9a 0b 	lds	r24, 0x0B9A	; 0x800b9a <xStart>
     3f8:	90 91 9b 0b 	lds	r25, 0x0B9B	; 0x800b9b <xStart+0x1>
     3fc:	9a 83       	std	Y+2, r25	; 0x02
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	0b c0       	rjmp	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	9a 81       	ldd	r25, Y+2	; 0x02
     406:	9c 83       	std	Y+4, r25	; 0x04
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	fc 01       	movw	r30, r24
     410:	80 81       	ld	r24, Z
     412:	91 81       	ldd	r25, Z+1	; 0x01
     414:	9a 83       	std	Y+2, r25	; 0x02
     416:	89 83       	std	Y+1, r24	; 0x01
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	fc 01       	movw	r30, r24
     41e:	22 81       	ldd	r18, Z+2	; 0x02
     420:	33 81       	ldd	r19, Z+3	; 0x03
     422:	8d 85       	ldd	r24, Y+13	; 0x0d
     424:	9e 85       	ldd	r25, Y+14	; 0x0e
     426:	28 17       	cp	r18, r24
     428:	39 07       	cpc	r19, r25
     42a:	38 f4       	brcc	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	89 2b       	or	r24, r25
     438:	21 f7       	brne	.-56     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
     43e:	8e 59       	subi	r24, 0x9E	; 158
     440:	9b 40       	sbci	r25, 0x0B	; 11
     442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	85 c0       	rjmp	.+266    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9c 81       	ldd	r25, Y+4	; 0x04
     44a:	fc 01       	movw	r30, r24
     44c:	20 81       	ld	r18, Z
     44e:	31 81       	ldd	r19, Z+1	; 0x01
     450:	84 e0       	ldi	r24, 0x04	; 4
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	82 0f       	add	r24, r18
     456:	93 1f       	adc	r25, r19
     458:	9e 83       	std	Y+6, r25	; 0x06
     45a:	8d 83       	std	Y+5, r24	; 0x05
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	fc 01       	movw	r30, r24
     462:	20 81       	ld	r18, Z
     464:	31 81       	ldd	r19, Z+1	; 0x01
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	9c 81       	ldd	r25, Y+4	; 0x04
     46a:	fc 01       	movw	r30, r24
     46c:	31 83       	std	Z+1, r19	; 0x01
     46e:	20 83       	st	Z, r18
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	9a 81       	ldd	r25, Y+2	; 0x02
     474:	fc 01       	movw	r30, r24
     476:	22 81       	ldd	r18, Z+2	; 0x02
     478:	33 81       	ldd	r19, Z+3	; 0x03
     47a:	8d 85       	ldd	r24, Y+13	; 0x0d
     47c:	9e 85       	ldd	r25, Y+14	; 0x0e
     47e:	28 1b       	sub	r18, r24
     480:	39 0b       	sbc	r19, r25
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	82 17       	cp	r24, r18
     48c:	93 07       	cpc	r25, r19
     48e:	08 f0       	brcs	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	4e c0       	rjmp	.+156    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     492:	29 81       	ldd	r18, Y+1	; 0x01
     494:	3a 81       	ldd	r19, Y+2	; 0x02
     496:	8d 85       	ldd	r24, Y+13	; 0x0d
     498:	9e 85       	ldd	r25, Y+14	; 0x0e
     49a:	82 0f       	add	r24, r18
     49c:	93 1f       	adc	r25, r19
     49e:	9a 87       	std	Y+10, r25	; 0x0a
     4a0:	89 87       	std	Y+9, r24	; 0x09
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	fc 01       	movw	r30, r24
     4a8:	22 81       	ldd	r18, Z+2	; 0x02
     4aa:	33 81       	ldd	r19, Z+3	; 0x03
     4ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     4ae:	9e 85       	ldd	r25, Y+14	; 0x0e
     4b0:	28 1b       	sub	r18, r24
     4b2:	39 0b       	sbc	r19, r25
     4b4:	89 85       	ldd	r24, Y+9	; 0x09
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	fc 01       	movw	r30, r24
     4ba:	33 83       	std	Z+3, r19	; 0x03
     4bc:	22 83       	std	Z+2, r18	; 0x02
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	9a 81       	ldd	r25, Y+2	; 0x02
     4c2:	2d 85       	ldd	r18, Y+13	; 0x0d
     4c4:	3e 85       	ldd	r19, Y+14	; 0x0e
     4c6:	fc 01       	movw	r30, r24
     4c8:	33 83       	std	Z+3, r19	; 0x03
     4ca:	22 83       	std	Z+2, r18	; 0x02
     4cc:	89 85       	ldd	r24, Y+9	; 0x09
     4ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d0:	fc 01       	movw	r30, r24
     4d2:	82 81       	ldd	r24, Z+2	; 0x02
     4d4:	93 81       	ldd	r25, Z+3	; 0x03
     4d6:	9c 87       	std	Y+12, r25	; 0x0c
     4d8:	8b 87       	std	Y+11, r24	; 0x0b
     4da:	8a e9       	ldi	r24, 0x9A	; 154
     4dc:	9b e0       	ldi	r25, 0x0B	; 11
     4de:	98 87       	std	Y+8, r25	; 0x08
     4e0:	8f 83       	std	Y+7, r24	; 0x07
     4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4e4:	8f 81       	ldd	r24, Y+7	; 0x07
     4e6:	98 85       	ldd	r25, Y+8	; 0x08
     4e8:	fc 01       	movw	r30, r24
     4ea:	80 81       	ld	r24, Z
     4ec:	91 81       	ldd	r25, Z+1	; 0x01
     4ee:	98 87       	std	Y+8, r25	; 0x08
     4f0:	8f 83       	std	Y+7, r24	; 0x07
     4f2:	8f 81       	ldd	r24, Y+7	; 0x07
     4f4:	98 85       	ldd	r25, Y+8	; 0x08
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	fc 01       	movw	r30, r24
     4fe:	22 81       	ldd	r18, Z+2	; 0x02
     500:	33 81       	ldd	r19, Z+3	; 0x03
     502:	8b 85       	ldd	r24, Y+11	; 0x0b
     504:	9c 85       	ldd	r25, Y+12	; 0x0c
     506:	28 17       	cp	r18, r24
     508:	39 07       	cpc	r19, r25
     50a:	60 f3       	brcs	.-40     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     50c:	8f 81       	ldd	r24, Y+7	; 0x07
     50e:	98 85       	ldd	r25, Y+8	; 0x08
     510:	fc 01       	movw	r30, r24
     512:	20 81       	ld	r18, Z
     514:	31 81       	ldd	r19, Z+1	; 0x01
     516:	89 85       	ldd	r24, Y+9	; 0x09
     518:	9a 85       	ldd	r25, Y+10	; 0x0a
     51a:	fc 01       	movw	r30, r24
     51c:	31 83       	std	Z+1, r19	; 0x01
     51e:	20 83       	st	Z, r18
     520:	8f 81       	ldd	r24, Y+7	; 0x07
     522:	98 85       	ldd	r25, Y+8	; 0x08
     524:	29 85       	ldd	r18, Y+9	; 0x09
     526:	3a 85       	ldd	r19, Y+10	; 0x0a
     528:	fc 01       	movw	r30, r24
     52a:	31 83       	std	Z+1, r19	; 0x01
     52c:	20 83       	st	Z, r18
     52e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     532:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	fc 01       	movw	r30, r24
     53c:	82 81       	ldd	r24, Z+2	; 0x02
     53e:	93 81       	ldd	r25, Z+3	; 0x03
     540:	a9 01       	movw	r20, r18
     542:	48 1b       	sub	r20, r24
     544:	59 0b       	sbc	r21, r25
     546:	ca 01       	movw	r24, r20
     548:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     54c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     550:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <xTaskResumeAll>
     554:	8d 81       	ldd	r24, Y+5	; 0x05
     556:	9e 81       	ldd	r25, Y+6	; 0x06
     558:	2e 96       	adiw	r28, 0x0e	; 14
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <vPortFree>:
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	2a 97       	sbiw	r28, 0x0a	; 10
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	9a 87       	std	Y+10, r25	; 0x0a
     580:	89 87       	std	Y+9, r24	; 0x09
     582:	89 85       	ldd	r24, Y+9	; 0x09
     584:	9a 85       	ldd	r25, Y+10	; 0x0a
     586:	9c 83       	std	Y+4, r25	; 0x04
     588:	8b 83       	std	Y+3, r24	; 0x03
     58a:	89 85       	ldd	r24, Y+9	; 0x09
     58c:	9a 85       	ldd	r25, Y+10	; 0x0a
     58e:	89 2b       	or	r24, r25
     590:	09 f4       	brne	.+2      	; 0x594 <vPortFree+0x2a>
     592:	53 c0       	rjmp	.+166    	; 0x63a <vPortFree+0xd0>
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	91 95       	neg	r25
     59a:	81 95       	neg	r24
     59c:	91 09       	sbc	r25, r1
     59e:	2b 81       	ldd	r18, Y+3	; 0x03
     5a0:	3c 81       	ldd	r19, Y+4	; 0x04
     5a2:	82 0f       	add	r24, r18
     5a4:	93 1f       	adc	r25, r19
     5a6:	9c 83       	std	Y+4, r25	; 0x04
     5a8:	8b 83       	std	Y+3, r24	; 0x03
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	9e 83       	std	Y+6, r25	; 0x06
     5b0:	8d 83       	std	Y+5, r24	; 0x05
     5b2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <vTaskSuspendAll>
     5b6:	8d 81       	ldd	r24, Y+5	; 0x05
     5b8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ba:	fc 01       	movw	r30, r24
     5bc:	82 81       	ldd	r24, Z+2	; 0x02
     5be:	93 81       	ldd	r25, Z+3	; 0x03
     5c0:	98 87       	std	Y+8, r25	; 0x08
     5c2:	8f 83       	std	Y+7, r24	; 0x07
     5c4:	8a e9       	ldi	r24, 0x9A	; 154
     5c6:	9b e0       	ldi	r25, 0x0B	; 11
     5c8:	9a 83       	std	Y+2, r25	; 0x02
     5ca:	89 83       	std	Y+1, r24	; 0x01
     5cc:	07 c0       	rjmp	.+14     	; 0x5dc <vPortFree+0x72>
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	91 81       	ldd	r25, Z+1	; 0x01
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	fc 01       	movw	r30, r24
     5e2:	80 81       	ld	r24, Z
     5e4:	91 81       	ldd	r25, Z+1	; 0x01
     5e6:	fc 01       	movw	r30, r24
     5e8:	22 81       	ldd	r18, Z+2	; 0x02
     5ea:	33 81       	ldd	r19, Z+3	; 0x03
     5ec:	8f 81       	ldd	r24, Y+7	; 0x07
     5ee:	98 85       	ldd	r25, Y+8	; 0x08
     5f0:	28 17       	cp	r18, r24
     5f2:	39 07       	cpc	r19, r25
     5f4:	60 f3       	brcs	.-40     	; 0x5ce <vPortFree+0x64>
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 81       	ld	r18, Z
     5fe:	31 81       	ldd	r19, Z+1	; 0x01
     600:	8d 81       	ldd	r24, Y+5	; 0x05
     602:	9e 81       	ldd	r25, Y+6	; 0x06
     604:	fc 01       	movw	r30, r24
     606:	31 83       	std	Z+1, r19	; 0x01
     608:	20 83       	st	Z, r18
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	2d 81       	ldd	r18, Y+5	; 0x05
     610:	3e 81       	ldd	r19, Y+6	; 0x06
     612:	fc 01       	movw	r30, r24
     614:	31 83       	std	Z+1, r19	; 0x01
     616:	20 83       	st	Z, r18
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	9e 81       	ldd	r25, Y+6	; 0x06
     61c:	fc 01       	movw	r30, r24
     61e:	22 81       	ldd	r18, Z+2	; 0x02
     620:	33 81       	ldd	r19, Z+3	; 0x03
     622:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     626:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     632:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     636:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <xTaskResumeAll>
     63a:	00 00       	nop
     63c:	2a 96       	adiw	r28, 0x0a	; 10
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	00 d0       	rcall	.+0      	; 0x654 <prvHeapInit+0x6>
     654:	00 d0       	rcall	.+0      	; 0x656 <prvHeapInit+0x8>
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     65a:	83 e2       	ldi	r24, 0x23	; 35
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9a 83       	std	Y+2, r25	; 0x02
     660:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	90 93 9b 0b 	sts	0x0B9B, r25	; 0x800b9b <xStart+0x1>
     66a:	80 93 9a 0b 	sts	0x0B9A, r24	; 0x800b9a <xStart>
	xStart.xBlockSize = ( size_t ) 0;
     66e:	10 92 9d 0b 	sts	0x0B9D, r1	; 0x800b9d <xStart+0x3>
     672:	10 92 9c 0b 	sts	0x0B9C, r1	; 0x800b9c <xStart+0x2>

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     676:	87 e7       	ldi	r24, 0x77	; 119
     678:	9a e0       	ldi	r25, 0x0A	; 10
     67a:	90 93 a1 0b 	sts	0x0BA1, r25	; 0x800ba1 <xEnd+0x3>
     67e:	80 93 a0 0b 	sts	0x0BA0, r24	; 0x800ba0 <xEnd+0x2>
	xEnd.pxNextFreeBlock = NULL;
     682:	10 92 9f 0b 	sts	0x0B9F, r1	; 0x800b9f <xEnd+0x1>
     686:	10 92 9e 0b 	sts	0x0B9E, r1	; 0x800b9e <xEnd>

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	9a 81       	ldd	r25, Y+2	; 0x02
     68e:	9c 83       	std	Y+4, r25	; 0x04
     690:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	27 e7       	ldi	r18, 0x77	; 119
     698:	3a e0       	ldi	r19, 0x0A	; 10
     69a:	fc 01       	movw	r30, r24
     69c:	33 83       	std	Z+3, r19	; 0x03
     69e:	22 83       	std	Z+2, r18	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	9c 81       	ldd	r25, Y+4	; 0x04
     6a4:	2e e9       	ldi	r18, 0x9E	; 158
     6a6:	3b e0       	ldi	r19, 0x0B	; 11
     6a8:	fc 01       	movw	r30, r24
     6aa:	31 83       	std	Z+1, r19	; 0x01
     6ac:	20 83       	st	Z, r18
}
     6ae:	00 00       	nop
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	08 95       	ret

000006be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <vListInitialise+0x6>
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	9a 83       	std	Y+2, r25	; 0x02
     6ca:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	9c 01       	movw	r18, r24
     6d2:	2d 5f       	subi	r18, 0xFD	; 253
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	fc 01       	movw	r30, r24
     6dc:	32 83       	std	Z+2, r19	; 0x02
     6de:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     6e0:	29 81       	ldd	r18, Y+1	; 0x01
     6e2:	3a 81       	ldd	r19, Y+2	; 0x02
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	9f ef       	ldi	r25, 0xFF	; 255
     6e8:	dc 01       	movw	r26, r24
     6ea:	f9 01       	movw	r30, r18
     6ec:	83 83       	std	Z+3, r24	; 0x03
     6ee:	94 83       	std	Z+4, r25	; 0x04
     6f0:	a5 83       	std	Z+5, r26	; 0x05
     6f2:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	9c 01       	movw	r18, r24
     6fa:	2d 5f       	subi	r18, 0xFD	; 253
     6fc:	3f 4f       	sbci	r19, 0xFF	; 255
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	9a 81       	ldd	r25, Y+2	; 0x02
     702:	fc 01       	movw	r30, r24
     704:	30 87       	std	Z+8, r19	; 0x08
     706:	27 83       	std	Z+7, r18	; 0x07
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	9a 81       	ldd	r25, Y+2	; 0x02
     70c:	9c 01       	movw	r18, r24
     70e:	2d 5f       	subi	r18, 0xFD	; 253
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	fc 01       	movw	r30, r24
     718:	32 87       	std	Z+10, r19	; 0x0a
     71a:	21 87       	std	Z+9, r18	; 0x09

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	9a 81       	ldd	r25, Y+2	; 0x02
     720:	fc 01       	movw	r30, r24
     722:	10 82       	st	Z, r1
}
     724:	00 00       	nop
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	00 d0       	rcall	.+0      	; 0x736 <vListInitialiseItem+0x6>
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	fc 01       	movw	r30, r24
     744:	13 86       	std	Z+11, r1	; 0x0b
     746:	12 86       	std	Z+10, r1	; 0x0a
}
     748:	00 00       	nop
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	00 d0       	rcall	.+0      	; 0x75a <vListInsertEnd+0x6>
     75a:	00 d0       	rcall	.+0      	; 0x75c <vListInsertEnd+0x8>
     75c:	00 d0       	rcall	.+0      	; 0x75e <vListInsertEnd+0xa>
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	9c 83       	std	Y+4, r25	; 0x04
     764:	8b 83       	std	Y+3, r24	; 0x03
     766:	7e 83       	std	Y+6, r23	; 0x06
     768:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	9c 81       	ldd	r25, Y+4	; 0x04
     76e:	fc 01       	movw	r30, r24
     770:	81 81       	ldd	r24, Z+1	; 0x01
     772:	92 81       	ldd	r25, Z+2	; 0x02
     774:	9a 83       	std	Y+2, r25	; 0x02
     776:	89 83       	std	Y+1, r24	; 0x01

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	9e 81       	ldd	r25, Y+6	; 0x06
     77c:	29 81       	ldd	r18, Y+1	; 0x01
     77e:	3a 81       	ldd	r19, Y+2	; 0x02
     780:	fc 01       	movw	r30, r24
     782:	35 83       	std	Z+5, r19	; 0x05
     784:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	fc 01       	movw	r30, r24
     78c:	26 81       	ldd	r18, Z+6	; 0x06
     78e:	37 81       	ldd	r19, Z+7	; 0x07
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	9e 81       	ldd	r25, Y+6	; 0x06
     794:	fc 01       	movw	r30, r24
     796:	37 83       	std	Z+7, r19	; 0x07
     798:	26 83       	std	Z+6, r18	; 0x06
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	fc 01       	movw	r30, r24
     7a0:	86 81       	ldd	r24, Z+6	; 0x06
     7a2:	97 81       	ldd	r25, Z+7	; 0x07
     7a4:	2d 81       	ldd	r18, Y+5	; 0x05
     7a6:	3e 81       	ldd	r19, Y+6	; 0x06
     7a8:	fc 01       	movw	r30, r24
     7aa:	35 83       	std	Z+5, r19	; 0x05
     7ac:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxPrevious = pxNewListItem;
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	2d 81       	ldd	r18, Y+5	; 0x05
     7b4:	3e 81       	ldd	r19, Y+6	; 0x06
     7b6:	fc 01       	movw	r30, r24
     7b8:	37 83       	std	Z+7, r19	; 0x07
     7ba:	26 83       	std	Z+6, r18	; 0x06

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     7bc:	8d 81       	ldd	r24, Y+5	; 0x05
     7be:	9e 81       	ldd	r25, Y+6	; 0x06
     7c0:	2b 81       	ldd	r18, Y+3	; 0x03
     7c2:	3c 81       	ldd	r19, Y+4	; 0x04
     7c4:	fc 01       	movw	r30, r24
     7c6:	33 87       	std	Z+11, r19	; 0x0b
     7c8:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
     7ca:	8b 81       	ldd	r24, Y+3	; 0x03
     7cc:	9c 81       	ldd	r25, Y+4	; 0x04
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	28 0f       	add	r18, r24
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
}
     7de:	00 00       	nop
     7e0:	26 96       	adiw	r28, 0x06	; 6
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	2a 97       	sbiw	r28, 0x0a	; 10
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	98 87       	std	Y+8, r25	; 0x08
     808:	8f 83       	std	Y+7, r24	; 0x07
     80a:	7a 87       	std	Y+10, r23	; 0x0a
     80c:	69 87       	std	Y+9, r22	; 0x09
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	9a 85       	ldd	r25, Y+10	; 0x0a
     812:	fc 01       	movw	r30, r24
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	a2 81       	ldd	r26, Z+2	; 0x02
     81a:	b3 81       	ldd	r27, Z+3	; 0x03
     81c:	8b 83       	std	Y+3, r24	; 0x03
     81e:	9c 83       	std	Y+4, r25	; 0x04
     820:	ad 83       	std	Y+5, r26	; 0x05
     822:	be 83       	std	Y+6, r27	; 0x06
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	ad 81       	ldd	r26, Y+5	; 0x05
     82a:	be 81       	ldd	r27, Y+6	; 0x06
     82c:	8f 3f       	cpi	r24, 0xFF	; 255
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	af 4f       	sbci	r26, 0xFF	; 255
     832:	bf 4f       	sbci	r27, 0xFF	; 255
     834:	41 f4       	brne	.+16     	; 0x846 <vListInsert+0x54>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     836:	8f 81       	ldd	r24, Y+7	; 0x07
     838:	98 85       	ldd	r25, Y+8	; 0x08
     83a:	fc 01       	movw	r30, r24
     83c:	81 85       	ldd	r24, Z+9	; 0x09
     83e:	92 85       	ldd	r25, Z+10	; 0x0a
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	20 c0       	rjmp	.+64     	; 0x886 <vListInsert+0x94>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     846:	8f 81       	ldd	r24, Y+7	; 0x07
     848:	98 85       	ldd	r25, Y+8	; 0x08
     84a:	03 96       	adiw	r24, 0x03	; 3
     84c:	9a 83       	std	Y+2, r25	; 0x02
     84e:	89 83       	std	Y+1, r24	; 0x01
     850:	07 c0       	rjmp	.+14     	; 0x860 <vListInsert+0x6e>
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	fc 01       	movw	r30, r24
     858:	84 81       	ldd	r24, Z+4	; 0x04
     85a:	95 81       	ldd	r25, Z+5	; 0x05
     85c:	9a 83       	std	Y+2, r25	; 0x02
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	fc 01       	movw	r30, r24
     866:	84 81       	ldd	r24, Z+4	; 0x04
     868:	95 81       	ldd	r25, Z+5	; 0x05
     86a:	fc 01       	movw	r30, r24
     86c:	20 81       	ld	r18, Z
     86e:	31 81       	ldd	r19, Z+1	; 0x01
     870:	42 81       	ldd	r20, Z+2	; 0x02
     872:	53 81       	ldd	r21, Z+3	; 0x03
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	9c 81       	ldd	r25, Y+4	; 0x04
     878:	ad 81       	ldd	r26, Y+5	; 0x05
     87a:	be 81       	ldd	r27, Y+6	; 0x06
     87c:	82 17       	cp	r24, r18
     87e:	93 07       	cpc	r25, r19
     880:	a4 07       	cpc	r26, r20
     882:	b5 07       	cpc	r27, r21
     884:	30 f7       	brcc	.-52     	; 0x852 <vListInsert+0x60>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	9a 81       	ldd	r25, Y+2	; 0x02
     88a:	fc 01       	movw	r30, r24
     88c:	24 81       	ldd	r18, Z+4	; 0x04
     88e:	35 81       	ldd	r19, Z+5	; 0x05
     890:	89 85       	ldd	r24, Y+9	; 0x09
     892:	9a 85       	ldd	r25, Y+10	; 0x0a
     894:	fc 01       	movw	r30, r24
     896:	35 83       	std	Z+5, r19	; 0x05
     898:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     89a:	89 85       	ldd	r24, Y+9	; 0x09
     89c:	9a 85       	ldd	r25, Y+10	; 0x0a
     89e:	fc 01       	movw	r30, r24
     8a0:	84 81       	ldd	r24, Z+4	; 0x04
     8a2:	95 81       	ldd	r25, Z+5	; 0x05
     8a4:	29 85       	ldd	r18, Y+9	; 0x09
     8a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a8:	fc 01       	movw	r30, r24
     8aa:	37 83       	std	Z+7, r19	; 0x07
     8ac:	26 83       	std	Z+6, r18	; 0x06
	pxNewListItem->pxPrevious = pxIterator;
     8ae:	89 85       	ldd	r24, Y+9	; 0x09
     8b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b2:	29 81       	ldd	r18, Y+1	; 0x01
     8b4:	3a 81       	ldd	r19, Y+2	; 0x02
     8b6:	fc 01       	movw	r30, r24
     8b8:	37 83       	std	Z+7, r19	; 0x07
     8ba:	26 83       	std	Z+6, r18	; 0x06
	pxIterator->pxNext = pxNewListItem;
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	29 85       	ldd	r18, Y+9	; 0x09
     8c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c4:	fc 01       	movw	r30, r24
     8c6:	35 83       	std	Z+5, r19	; 0x05
     8c8:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8ca:	89 85       	ldd	r24, Y+9	; 0x09
     8cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ce:	2f 81       	ldd	r18, Y+7	; 0x07
     8d0:	38 85       	ldd	r19, Y+8	; 0x08
     8d2:	fc 01       	movw	r30, r24
     8d4:	33 87       	std	Z+11, r19	; 0x0b
     8d6:	22 87       	std	Z+10, r18	; 0x0a

	( pxList->uxNumberOfItems )++;
     8d8:	8f 81       	ldd	r24, Y+7	; 0x07
     8da:	98 85       	ldd	r25, Y+8	; 0x08
     8dc:	fc 01       	movw	r30, r24
     8de:	80 81       	ld	r24, Z
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	28 0f       	add	r18, r24
     8e4:	8f 81       	ldd	r24, Y+7	; 0x07
     8e6:	98 85       	ldd	r25, Y+8	; 0x08
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
}
     8ec:	00 00       	nop
     8ee:	2a 96       	adiw	r28, 0x0a	; 10
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	00 d0       	rcall	.+0      	; 0x906 <uxListRemove+0x6>
     906:	00 d0       	rcall	.+0      	; 0x908 <uxListRemove+0x8>
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	fc 01       	movw	r30, r24
     916:	82 85       	ldd	r24, Z+10	; 0x0a
     918:	93 85       	ldd	r25, Z+11	; 0x0b
     91a:	9a 83       	std	Y+2, r25	; 0x02
     91c:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	9c 81       	ldd	r25, Y+4	; 0x04
     922:	fc 01       	movw	r30, r24
     924:	84 81       	ldd	r24, Z+4	; 0x04
     926:	95 81       	ldd	r25, Z+5	; 0x05
     928:	2b 81       	ldd	r18, Y+3	; 0x03
     92a:	3c 81       	ldd	r19, Y+4	; 0x04
     92c:	f9 01       	movw	r30, r18
     92e:	26 81       	ldd	r18, Z+6	; 0x06
     930:	37 81       	ldd	r19, Z+7	; 0x07
     932:	fc 01       	movw	r30, r24
     934:	37 83       	std	Z+7, r19	; 0x07
     936:	26 83       	std	Z+6, r18	; 0x06
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	fc 01       	movw	r30, r24
     93e:	86 81       	ldd	r24, Z+6	; 0x06
     940:	97 81       	ldd	r25, Z+7	; 0x07
     942:	2b 81       	ldd	r18, Y+3	; 0x03
     944:	3c 81       	ldd	r19, Y+4	; 0x04
     946:	f9 01       	movw	r30, r18
     948:	24 81       	ldd	r18, Z+4	; 0x04
     94a:	35 81       	ldd	r19, Z+5	; 0x05
     94c:	fc 01       	movw	r30, r24
     94e:	35 83       	std	Z+5, r19	; 0x05
     950:	24 83       	std	Z+4, r18	; 0x04

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     952:	89 81       	ldd	r24, Y+1	; 0x01
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	fc 01       	movw	r30, r24
     958:	21 81       	ldd	r18, Z+1	; 0x01
     95a:	32 81       	ldd	r19, Z+2	; 0x02
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	9c 81       	ldd	r25, Y+4	; 0x04
     960:	28 17       	cp	r18, r24
     962:	39 07       	cpc	r19, r25
     964:	51 f4       	brne	.+20     	; 0x97a <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     966:	8b 81       	ldd	r24, Y+3	; 0x03
     968:	9c 81       	ldd	r25, Y+4	; 0x04
     96a:	fc 01       	movw	r30, r24
     96c:	26 81       	ldd	r18, Z+6	; 0x06
     96e:	37 81       	ldd	r19, Z+7	; 0x07
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	fc 01       	movw	r30, r24
     976:	32 83       	std	Z+2, r19	; 0x02
     978:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	fc 01       	movw	r30, r24
     980:	13 86       	std	Z+11, r1	; 0x0b
     982:	12 86       	std	Z+10, r1	; 0x0a
	( pxList->uxNumberOfItems )--;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	2f ef       	ldi	r18, 0xFF	; 255
     98e:	28 0f       	add	r18, r24
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	9a 81       	ldd	r25, Y+2	; 0x02
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	fc 01       	movw	r30, r24
     99e:	80 81       	ld	r24, Z
}
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <_Znwj>:
extern "C"
{
void __cxa_guard_abort (__guard *g)
    {
		(void)g;							// Shuts up a dumb compiler warning
    }
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <_Znwj+0x6>
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	9a 83       	std	Y+2, r25	; 0x02
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	0e 94 c6 01 	call	0x38c	; 0x38c <pvPortMalloc>
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <__cxa_pure_virtual>:
 */

extern "C"
{    
void __cxa_pure_virtual (void)
    {
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
    }
     9d6:	00 00       	nop
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <pxPortInitialiseStack>:
			TIMSK |= (1 << OCIE1A);             // Mega128 uses this old register
		#else
			#error "Neither TIMSK1, ETIMSK, nor TIMSK defined; cannot set up Timer 1"
		#endif
	#endif
}
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	28 97       	sbiw	r28, 0x08	; 8
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	9c 83       	std	Y+4, r25	; 0x04
     9f4:	8b 83       	std	Y+3, r24	; 0x03
     9f6:	7e 83       	std	Y+6, r23	; 0x06
     9f8:	6d 83       	std	Y+5, r22	; 0x05
     9fa:	58 87       	std	Y+8, r21	; 0x08
     9fc:	4f 83       	std	Y+7, r20	; 0x07
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	9c 81       	ldd	r25, Y+4	; 0x04
     a02:	90 93 1f 0c 	sts	0x0C1F, r25	; 0x800c1f <portStackTopForTask+0x1>
     a06:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <portStackTopForTask>
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	9c 81       	ldd	r25, Y+4	; 0x04
     a0e:	21 e1       	ldi	r18, 0x11	; 17
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	9c 81       	ldd	r25, Y+4	; 0x04
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	9c 83       	std	Y+4, r25	; 0x04
     a1c:	8b 83       	std	Y+3, r24	; 0x03
     a1e:	8b 81       	ldd	r24, Y+3	; 0x03
     a20:	9c 81       	ldd	r25, Y+4	; 0x04
     a22:	22 e2       	ldi	r18, 0x22	; 34
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	9c 81       	ldd	r25, Y+4	; 0x04
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	9c 83       	std	Y+4, r25	; 0x04
     a30:	8b 83       	std	Y+3, r24	; 0x03
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	23 e3       	ldi	r18, 0x33	; 51
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	8b 83       	std	Y+3, r24	; 0x03
     a46:	8d 81       	ldd	r24, Y+5	; 0x05
     a48:	9e 81       	ldd	r25, Y+6	; 0x06
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	29 81       	ldd	r18, Y+1	; 0x01
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	fc 01       	movw	r30, r24
     a56:	20 83       	st	Z, r18
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	9c 81       	ldd	r25, Y+4	; 0x04
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	9c 83       	std	Y+4, r25	; 0x04
     a60:	8b 83       	std	Y+3, r24	; 0x03
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	89 2f       	mov	r24, r25
     a68:	99 27       	eor	r25, r25
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01
     a6e:	29 81       	ldd	r18, Y+1	; 0x01
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	9c 81       	ldd	r25, Y+4	; 0x04
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	9c 83       	std	Y+4, r25	; 0x04
     a80:	8b 83       	std	Y+3, r24	; 0x03
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	fc 01       	movw	r30, r24
     a88:	10 82       	st	Z, r1
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	9c 81       	ldd	r25, Y+4	; 0x04
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	9c 83       	std	Y+4, r25	; 0x04
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	9c 81       	ldd	r25, Y+4	; 0x04
     a98:	20 e8       	ldi	r18, 0x80	; 128
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18
     a9e:	8b 81       	ldd	r24, Y+3	; 0x03
     aa0:	9c 81       	ldd	r25, Y+4	; 0x04
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	fc 01       	movw	r30, r24
     aae:	10 82       	st	Z, r1
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	22 e0       	ldi	r18, 0x02	; 2
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	9c 83       	std	Y+4, r25	; 0x04
     acc:	8b 83       	std	Y+3, r24	; 0x03
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	9c 81       	ldd	r25, Y+4	; 0x04
     ad2:	23 e0       	ldi	r18, 0x03	; 3
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	9c 83       	std	Y+4, r25	; 0x04
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	8b 81       	ldd	r24, Y+3	; 0x03
     ae4:	9c 81       	ldd	r25, Y+4	; 0x04
     ae6:	24 e0       	ldi	r18, 0x04	; 4
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	9c 81       	ldd	r25, Y+4	; 0x04
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	8b 83       	std	Y+3, r24	; 0x03
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	25 e0       	ldi	r18, 0x05	; 5
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	9c 83       	std	Y+4, r25	; 0x04
     b08:	8b 83       	std	Y+3, r24	; 0x03
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	26 e0       	ldi	r18, 0x06	; 6
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	8b 83       	std	Y+3, r24	; 0x03
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	9c 81       	ldd	r25, Y+4	; 0x04
     b22:	27 e0       	ldi	r18, 0x07	; 7
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	9c 83       	std	Y+4, r25	; 0x04
     b30:	8b 83       	std	Y+3, r24	; 0x03
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	9c 81       	ldd	r25, Y+4	; 0x04
     b36:	28 e0       	ldi	r18, 0x08	; 8
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	9c 83       	std	Y+4, r25	; 0x04
     b44:	8b 83       	std	Y+3, r24	; 0x03
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	29 e0       	ldi	r18, 0x09	; 9
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	9c 83       	std	Y+4, r25	; 0x04
     b58:	8b 83       	std	Y+3, r24	; 0x03
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	20 e1       	ldi	r18, 0x10	; 16
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	8b 83       	std	Y+3, r24	; 0x03
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	21 e1       	ldi	r18, 0x11	; 17
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	9c 83       	std	Y+4, r25	; 0x04
     b80:	8b 83       	std	Y+3, r24	; 0x03
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	22 e1       	ldi	r18, 0x12	; 18
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	9c 83       	std	Y+4, r25	; 0x04
     b94:	8b 83       	std	Y+3, r24	; 0x03
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	23 e1       	ldi	r18, 0x13	; 19
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	9c 83       	std	Y+4, r25	; 0x04
     ba8:	8b 83       	std	Y+3, r24	; 0x03
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	24 e1       	ldi	r18, 0x14	; 20
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	9c 83       	std	Y+4, r25	; 0x04
     bbc:	8b 83       	std	Y+3, r24	; 0x03
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	25 e1       	ldi	r18, 0x15	; 21
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	9c 83       	std	Y+4, r25	; 0x04
     bd0:	8b 83       	std	Y+3, r24	; 0x03
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	26 e1       	ldi	r18, 0x16	; 22
     bd8:	fc 01       	movw	r30, r24
     bda:	20 83       	st	Z, r18
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	9c 83       	std	Y+4, r25	; 0x04
     be4:	8b 83       	std	Y+3, r24	; 0x03
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	27 e1       	ldi	r18, 0x17	; 23
     bec:	fc 01       	movw	r30, r24
     bee:	20 83       	st	Z, r18
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	9c 83       	std	Y+4, r25	; 0x04
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	28 e1       	ldi	r18, 0x18	; 24
     c00:	fc 01       	movw	r30, r24
     c02:	20 83       	st	Z, r18
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	29 e1       	ldi	r18, 0x19	; 25
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	20 e2       	ldi	r18, 0x20	; 32
     c28:	fc 01       	movw	r30, r24
     c2a:	20 83       	st	Z, r18
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	21 e2       	ldi	r18, 0x21	; 33
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	9c 83       	std	Y+4, r25	; 0x04
     c48:	8b 83       	std	Y+3, r24	; 0x03
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	22 e2       	ldi	r18, 0x22	; 34
     c50:	fc 01       	movw	r30, r24
     c52:	20 83       	st	Z, r18
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	8b 83       	std	Y+3, r24	; 0x03
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	23 e2       	ldi	r18, 0x23	; 35
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
     c72:	8f 81       	ldd	r24, Y+7	; 0x07
     c74:	98 85       	ldd	r25, Y+8	; 0x08
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	29 81       	ldd	r18, Y+1	; 0x01
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	9c 83       	std	Y+4, r25	; 0x04
     c8c:	8b 83       	std	Y+3, r24	; 0x03
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	89 2f       	mov	r24, r25
     c94:	99 27       	eor	r25, r25
     c96:	9a 83       	std	Y+2, r25	; 0x02
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	29 81       	ldd	r18, Y+1	; 0x01
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	26 e2       	ldi	r18, 0x26	; 38
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9c 81       	ldd	r25, Y+4	; 0x04
     cc6:	27 e2       	ldi	r18, 0x27	; 39
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	9c 83       	std	Y+4, r25	; 0x04
     cd4:	8b 83       	std	Y+3, r24	; 0x03
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	28 e2       	ldi	r18, 0x28	; 40
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	29 e2       	ldi	r18, 0x29	; 41
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	20 e3       	ldi	r18, 0x30	; 48
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	9c 83       	std	Y+4, r25	; 0x04
     d10:	8b 83       	std	Y+3, r24	; 0x03
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	21 e3       	ldi	r18, 0x31	; 49
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	9c 83       	std	Y+4, r25	; 0x04
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	28 96       	adiw	r28, 0x08	; 8
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <vPortYield>:
     d3c:	0f 92       	push	r0
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	0f 92       	push	r0
     d44:	1f 92       	push	r1
     d46:	11 24       	eor	r1, r1
     d48:	2f 92       	push	r2
     d4a:	3f 92       	push	r3
     d4c:	4f 92       	push	r4
     d4e:	5f 92       	push	r5
     d50:	6f 92       	push	r6
     d52:	7f 92       	push	r7
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	2f 93       	push	r18
     d6a:	3f 93       	push	r19
     d6c:	4f 93       	push	r20
     d6e:	5f 93       	push	r21
     d70:	6f 93       	push	r22
     d72:	7f 93       	push	r23
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	af 93       	push	r26
     d7a:	bf 93       	push	r27
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
     d84:	a0 91 b1 0b 	lds	r26, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
     d88:	b0 91 b2 0b 	lds	r27, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
     d8c:	0d b6       	in	r0, 0x3d	; 61
     d8e:	0d 92       	st	X+, r0
     d90:	0e b6       	in	r0, 0x3e	; 62
     d92:	0d 92       	st	X+, r0
     d94:	0e 94 2e 0c 	call	0x185c	; 0x185c <vTaskSwitchContext>
     d98:	a0 91 b1 0b 	lds	r26, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
     d9c:	b0 91 b2 0b 	lds	r27, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
     da0:	cd 91       	ld	r28, X+
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	dd 91       	ld	r29, X+
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	ff 91       	pop	r31
     daa:	ef 91       	pop	r30
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	9f 90       	pop	r9
     dd6:	8f 90       	pop	r8
     dd8:	7f 90       	pop	r7
     dda:	6f 90       	pop	r6
     ddc:	5f 90       	pop	r5
     dde:	4f 90       	pop	r4
     de0:	3f 90       	pop	r3
     de2:	2f 90       	pop	r2
     de4:	1f 90       	pop	r1
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	0f 90       	pop	r0
     dec:	08 95       	ret
	...

00000df0 <vPortYieldFromTick>:
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	0f 92       	push	r0
     df8:	1f 92       	push	r1
     dfa:	11 24       	eor	r1, r1
     dfc:	2f 92       	push	r2
     dfe:	3f 92       	push	r3
     e00:	4f 92       	push	r4
     e02:	5f 92       	push	r5
     e04:	6f 92       	push	r6
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
     e38:	a0 91 b1 0b 	lds	r26, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
     e3c:	b0 91 b2 0b 	lds	r27, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
     e40:	0d b6       	in	r0, 0x3d	; 61
     e42:	0d 92       	st	X+, r0
     e44:	0e b6       	in	r0, 0x3e	; 62
     e46:	0d 92       	st	X+, r0
     e48:	0e 94 14 0b 	call	0x1628	; 0x1628 <xTaskIncrementTick>
     e4c:	88 23       	and	r24, r24
     e4e:	11 f0       	breq	.+4      	; 0xe54 <vPortYieldFromTick+0x64>
     e50:	0e 94 2e 0c 	call	0x185c	; 0x185c <vTaskSwitchContext>
     e54:	a0 91 b1 0b 	lds	r26, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
     e58:	b0 91 b2 0b 	lds	r27, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
     e5c:	cd 91       	ld	r28, X+
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	dd 91       	ld	r29, X+
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	3f 90       	pop	r3
     e9e:	2f 90       	pop	r2
     ea0:	1f 90       	pop	r1
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	08 95       	ret
	...

00000eac <__vector_26>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
     eac:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     eb0:	18 95       	reti
	...

00000eb4 <__vector_18>:
 *  This interrupt service routine runs whenever a character has been received by the
 *  first serial port (number 0).  It saves that character into the receiver buffer.
 */

ISR (RSI_CHAR_RECV_INT_0)
{
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	#if defined UCSR0A  // If this is a dual-serial-port chip (ATmega324P, 128, etc.)
		rcv0_buffer[rcv0_write_index] = UDR0;
     ed4:	20 91 a3 0b 	lds	r18, 0x0BA3	; 0x800ba3 <rcv0_buffer>
     ed8:	30 91 a4 0b 	lds	r19, 0x0BA4	; 0x800ba4 <rcv0_buffer+0x1>
     edc:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <rcv0_write_index>
     ee0:	90 91 a8 0b 	lds	r25, 0x0BA8	; 0x800ba8 <rcv0_write_index+0x1>
     ee4:	82 0f       	add	r24, r18
     ee6:	93 1f       	adc	r25, r19
     ee8:	2c e2       	ldi	r18, 0x2C	; 44
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	f9 01       	movw	r30, r18
     eee:	20 81       	ld	r18, Z
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 83       	st	Z, r18
	#else  // If this chip has only a single serial port (ATmega8, 32, etc.)
		rcv0_buffer[rcv0_write_index] = UDR;
	#endif

	// Increment the write pointer
	if (++rcv0_write_index >= RSINT_BUF_SIZE)
     ef4:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <rcv0_write_index>
     ef8:	90 91 a8 0b 	lds	r25, 0x0BA8	; 0x800ba8 <rcv0_write_index+0x1>
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	90 93 a8 0b 	sts	0x0BA8, r25	; 0x800ba8 <rcv0_write_index+0x1>
     f02:	80 93 a7 0b 	sts	0x0BA7, r24	; 0x800ba7 <rcv0_write_index>
     f06:	80 91 a7 0b 	lds	r24, 0x0BA7	; 0x800ba7 <rcv0_write_index>
     f0a:	90 91 a8 0b 	lds	r25, 0x0BA8	; 0x800ba8 <rcv0_write_index+0x1>
     f0e:	21 e0       	ldi	r18, 0x01	; 1
     f10:	80 97       	sbiw	r24, 0x20	; 32
     f12:	08 f4       	brcc	.+2      	; 0xf16 <__vector_18+0x62>
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	22 23       	and	r18, r18
     f18:	21 f0       	breq	.+8      	; 0xf22 <__vector_18+0x6e>
		rcv0_write_index = 0;
     f1a:	10 92 a8 0b 	sts	0x0BA8, r1	; 0x800ba8 <rcv0_write_index+0x1>
     f1e:	10 92 a7 0b 	sts	0x0BA7, r1	; 0x800ba7 <rcv0_write_index>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcv0_write_index == rcv0_read_index)
     f22:	20 91 a7 0b 	lds	r18, 0x0BA7	; 0x800ba7 <rcv0_write_index>
     f26:	30 91 a8 0b 	lds	r19, 0x0BA8	; 0x800ba8 <rcv0_write_index+0x1>
     f2a:	80 91 a5 0b 	lds	r24, 0x0BA5	; 0x800ba5 <rcv0_read_index>
     f2e:	90 91 a6 0b 	lds	r25, 0x0BA6	; 0x800ba6 <rcv0_read_index+0x1>
     f32:	28 17       	cp	r18, r24
     f34:	39 07       	cpc	r19, r25
     f36:	b9 f4       	brne	.+46     	; 0xf66 <__vector_18+0xb2>
		if (++rcv0_read_index >= RSINT_BUF_SIZE)
     f38:	80 91 a5 0b 	lds	r24, 0x0BA5	; 0x800ba5 <rcv0_read_index>
     f3c:	90 91 a6 0b 	lds	r25, 0x0BA6	; 0x800ba6 <rcv0_read_index+0x1>
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	90 93 a6 0b 	sts	0x0BA6, r25	; 0x800ba6 <rcv0_read_index+0x1>
     f46:	80 93 a5 0b 	sts	0x0BA5, r24	; 0x800ba5 <rcv0_read_index>
     f4a:	80 91 a5 0b 	lds	r24, 0x0BA5	; 0x800ba5 <rcv0_read_index>
     f4e:	90 91 a6 0b 	lds	r25, 0x0BA6	; 0x800ba6 <rcv0_read_index+0x1>
     f52:	21 e0       	ldi	r18, 0x01	; 1
     f54:	80 97       	sbiw	r24, 0x20	; 32
     f56:	08 f4       	brcc	.+2      	; 0xf5a <__vector_18+0xa6>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	22 23       	and	r18, r18
     f5c:	21 f0       	breq	.+8      	; 0xf66 <__vector_18+0xb2>
			rcv0_read_index = 0;
     f5e:	10 92 a6 0b 	sts	0x0BA6, r1	; 0x800ba6 <rcv0_read_index+0x1>
     f62:	10 92 a5 0b 	sts	0x0BA5, r1	; 0x800ba5 <rcv0_read_index>
}
     f66:	00 00       	nop
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_30>:
	/** This interrupt service routine runs whenever a character has been received by the
	*  first serial port (number 0).  It saves that character into the receiver buffer.
	*/

	ISR (RSI_CHAR_RECV_INT_1)
	{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f8c:	0f 92       	push	r0
     f8e:	11 24       	eor	r1, r1
     f90:	2f 93       	push	r18
     f92:	3f 93       	push	r19
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
		// Read the character from the serial port receiver buffer
		rcv1_buffer[rcv1_write_index] = UDR1;
     fa4:	20 91 a9 0b 	lds	r18, 0x0BA9	; 0x800ba9 <rcv1_buffer>
     fa8:	30 91 aa 0b 	lds	r19, 0x0BAA	; 0x800baa <rcv1_buffer+0x1>
     fac:	80 91 ad 0b 	lds	r24, 0x0BAD	; 0x800bad <rcv1_write_index>
     fb0:	90 91 ae 0b 	lds	r25, 0x0BAE	; 0x800bae <rcv1_write_index+0x1>
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	2c e9       	ldi	r18, 0x9C	; 156
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	f9 01       	movw	r30, r18
     fbe:	20 81       	ld	r18, Z
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 83       	st	Z, r18

		// Increment the write pointer
		if (++rcv1_write_index >= RSINT_BUF_SIZE)
     fc4:	80 91 ad 0b 	lds	r24, 0x0BAD	; 0x800bad <rcv1_write_index>
     fc8:	90 91 ae 0b 	lds	r25, 0x0BAE	; 0x800bae <rcv1_write_index+0x1>
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	90 93 ae 0b 	sts	0x0BAE, r25	; 0x800bae <rcv1_write_index+0x1>
     fd2:	80 93 ad 0b 	sts	0x0BAD, r24	; 0x800bad <rcv1_write_index>
     fd6:	80 91 ad 0b 	lds	r24, 0x0BAD	; 0x800bad <rcv1_write_index>
     fda:	90 91 ae 0b 	lds	r25, 0x0BAE	; 0x800bae <rcv1_write_index+0x1>
     fde:	21 e0       	ldi	r18, 0x01	; 1
     fe0:	80 97       	sbiw	r24, 0x20	; 32
     fe2:	08 f4       	brcc	.+2      	; 0xfe6 <__vector_30+0x62>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	22 23       	and	r18, r18
     fe8:	21 f0       	breq	.+8      	; 0xff2 <__vector_30+0x6e>
			rcv1_write_index = 0;
     fea:	10 92 ae 0b 	sts	0x0BAE, r1	; 0x800bae <rcv1_write_index+0x1>
     fee:	10 92 ad 0b 	sts	0x0BAD, r1	; 0x800bad <rcv1_write_index>

		// If the write pointer is now equal to the read pointer, that means we've just
		// overwritten the oldest data. Increment the read pointer so that it doesn't seem
		// as if the buffer is empty
		if (rcv1_write_index == rcv1_read_index)
     ff2:	20 91 ad 0b 	lds	r18, 0x0BAD	; 0x800bad <rcv1_write_index>
     ff6:	30 91 ae 0b 	lds	r19, 0x0BAE	; 0x800bae <rcv1_write_index+0x1>
     ffa:	80 91 ab 0b 	lds	r24, 0x0BAB	; 0x800bab <rcv1_read_index>
     ffe:	90 91 ac 0b 	lds	r25, 0x0BAC	; 0x800bac <rcv1_read_index+0x1>
    1002:	28 17       	cp	r18, r24
    1004:	39 07       	cpc	r19, r25
    1006:	b9 f4       	brne	.+46     	; 0x1036 <__vector_30+0xb2>
			if (++rcv1_read_index >= RSINT_BUF_SIZE)
    1008:	80 91 ab 0b 	lds	r24, 0x0BAB	; 0x800bab <rcv1_read_index>
    100c:	90 91 ac 0b 	lds	r25, 0x0BAC	; 0x800bac <rcv1_read_index+0x1>
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	90 93 ac 0b 	sts	0x0BAC, r25	; 0x800bac <rcv1_read_index+0x1>
    1016:	80 93 ab 0b 	sts	0x0BAB, r24	; 0x800bab <rcv1_read_index>
    101a:	80 91 ab 0b 	lds	r24, 0x0BAB	; 0x800bab <rcv1_read_index>
    101e:	90 91 ac 0b 	lds	r25, 0x0BAC	; 0x800bac <rcv1_read_index+0x1>
    1022:	21 e0       	ldi	r18, 0x01	; 1
    1024:	80 97       	sbiw	r24, 0x20	; 32
    1026:	08 f4       	brcc	.+2      	; 0x102a <__vector_30+0xa6>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	22 23       	and	r18, r18
    102c:	21 f0       	breq	.+8      	; 0x1036 <__vector_30+0xb2>
				rcv1_read_index = 0;
    102e:	10 92 ac 0b 	sts	0x0BAC, r1	; 0x800bac <rcv1_read_index+0x1>
    1032:	10 92 ab 0b 	sts	0x0BAB, r1	; 0x800bab <rcv1_read_index>
	}
    1036:	00 00       	nop
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	3f 91       	pop	r19
    1046:	2f 91       	pop	r18
    1048:	0f 90       	pop	r0
    104a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <_ZN8TaskBaseC1EPKchjP8emstream>:
 *                        (default: @c configMINIMAL_STACK_SIZE)
 *  @param   p_ser_dev Pointer to a serial device (port, radio, SD card, etc.) which 
 *                     can be used by this task to communicate (default: NULL)
 */

TaskBase::TaskBase (const char* a_name, unsigned portBASE_TYPE a_priority, 
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	2a 97       	sbiw	r28, 0x0a	; 10
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	9b 83       	std	Y+3, r25	; 0x03
    107a:	8a 83       	std	Y+2, r24	; 0x02
    107c:	7d 83       	std	Y+5, r23	; 0x05
    107e:	6c 83       	std	Y+4, r22	; 0x04
    1080:	4e 83       	std	Y+6, r20	; 0x06
    1082:	38 87       	std	Y+8, r19	; 0x08
    1084:	2f 83       	std	Y+7, r18	; 0x07
    1086:	1a 87       	std	Y+10, r17	; 0x0a
    1088:	09 87       	std	Y+9, r16	; 0x09
					size_t a_stack_size, emstream* p_ser_dev)
    108a:	2e e1       	ldi	r18, 0x1E	; 30
    108c:	31 e0       	ldi	r19, 0x01	; 1
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	9b 81       	ldd	r25, Y+3	; 0x03
    1092:	fc 01       	movw	r30, r24
    1094:	31 83       	std	Z+1, r19	; 0x01
    1096:	20 83       	st	Z, r18
{
	// Create the task with a call to the RTOS task creation function
	portBASE_TYPE task_status = xTaskCreate
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	bc 01       	movw	r22, r24
    109e:	6e 5f       	subi	r22, 0xFE	; 254
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	2a 81       	ldd	r18, Y+2	; 0x02
    10a4:	3b 81       	ldd	r19, Y+3	; 0x03
    10a6:	4f 81       	ldd	r20, Y+7	; 0x07
    10a8:	58 85       	ldd	r21, Y+8	; 0x08
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	a1 2c       	mov	r10, r1
    10b0:	b1 2c       	mov	r11, r1
    10b2:	c1 2c       	mov	r12, r1
    10b4:	d1 2c       	mov	r13, r1
    10b6:	7b 01       	movw	r14, r22
    10b8:	0e 81       	ldd	r16, Y+6	; 0x06
    10ba:	bc 01       	movw	r22, r24
    10bc:	83 eb       	ldi	r24, 0xB3	; 179
    10be:	98 e0       	ldi	r25, 0x08	; 8
    10c0:	0e 94 2c 09 	call	0x1258	; 0x1258 <xTaskGenericCreate>
    10c4:	89 83       	std	Y+1, r24	; 0x01
		 a_priority,                                // Priority for the new task
		 &handle                                    // The new task's handle
		);

	// Save the serial port pointer and the total stack size
	p_serial = p_ser_dev;
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	29 85       	ldd	r18, Y+9	; 0x09
    10cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ce:	fc 01       	movw	r30, r24
    10d0:	37 83       	std	Z+7, r19	; 0x07
    10d2:	26 83       	std	Z+6, r18	; 0x06
	total_stack = a_stack_size;
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	9b 81       	ldd	r25, Y+3	; 0x03
    10d8:	2f 81       	ldd	r18, Y+7	; 0x07
    10da:	38 85       	ldd	r19, Y+8	; 0x08
    10dc:	fc 01       	movw	r30, r24
    10de:	31 87       	std	Z+9, r19	; 0x09
    10e0:	20 87       	std	Z+8, r18	; 0x08

	// Set the handles to the previously and last created tasks
	prev_task_pointer = last_created_task_pointer;
    10e2:	20 91 af 0b 	lds	r18, 0x0BAF	; 0x800baf <last_created_task_pointer>
    10e6:	30 91 b0 0b 	lds	r19, 0x0BB0	; 0x800bb0 <last_created_task_pointer+0x1>
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	9b 81       	ldd	r25, Y+3	; 0x03
    10ee:	fc 01       	movw	r30, r24
    10f0:	35 83       	std	Z+5, r19	; 0x05
    10f2:	24 83       	std	Z+4, r18	; 0x04
	last_created_task_pointer = this;
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	9b 81       	ldd	r25, Y+3	; 0x03
    10f8:	90 93 b0 0b 	sts	0x0BB0, r25	; 0x800bb0 <last_created_task_pointer+0x1>
    10fc:	80 93 af 0b 	sts	0x0BAF, r24	; 0x800baf <last_created_task_pointer>

	// Initialize the finite state machine and its transition logger
	state = 0;
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	9b 81       	ldd	r25, Y+3	; 0x03
    1104:	fc 01       	movw	r30, r24
    1106:	14 86       	std	Z+12, r1	; 0x0c
	previous_state = 0;
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	fc 01       	movw	r30, r24
    110e:	15 86       	std	Z+13, r1	; 0x0d

	// If stack tracing is being used, save the address of the top of the stack
	top_of_stack = ++portStackTopForTask;
    1110:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <portStackTopForTask>
    1114:	90 91 1f 0c 	lds	r25, 0x0C1F	; 0x800c1f <portStackTopForTask+0x1>
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	90 93 1f 0c 	sts	0x0C1F, r25	; 0x800c1f <portStackTopForTask+0x1>
    111e:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <portStackTopForTask>
    1122:	20 91 1e 0c 	lds	r18, 0x0C1E	; 0x800c1e <portStackTopForTask>
    1126:	30 91 1f 0c 	lds	r19, 0x0C1F	; 0x800c1f <portStackTopForTask+0x1>
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	fc 01       	movw	r30, r24
    1130:	33 87       	std	Z+11, r19	; 0x0b
    1132:	22 87       	std	Z+10, r18	; 0x0a

	// Initialize the run counter
	runs = 0;
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	9b 81       	ldd	r25, Y+3	; 0x03
    1138:	fc 01       	movw	r30, r24
    113a:	16 86       	std	Z+14, r1	; 0x0e
    113c:	17 86       	std	Z+15, r1	; 0x0f
    113e:	10 8a       	std	Z+16, r1	; 0x10
    1140:	11 8a       	std	Z+17, r1	; 0x11
		{
			*p_serial << PMS ("ERROR creating task \"") << a_name << '"' << endl;
		}
		***/
	}
}
    1142:	00 00       	nop
    1144:	2a 96       	adiw	r28, 0x0a	; 10
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	bf 90       	pop	r11
    1162:	af 90       	pop	r10
    1164:	08 95       	ret

00001166 <_call_static_run_method>:
 *  @param   p_task A pointer to the task is given as a parameter to this task 
 *                  function; the pointer is used to find the task's static run method
 */

extern "C" inline void _call_static_run_method (TaskBase* p_task)
{
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	00 d0       	rcall	.+0      	; 0x116c <_call_static_run_method+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	TaskBase::_call_users_run_method (p_task);
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN8TaskBase22_call_users_run_methodEPS_>
}
    117c:	00 00       	nop
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <_ZN8TaskBase22_call_users_run_methodEPS_>:
 *           it is the C (not C++) function which was registered with the scheduler.
 *  @param   p_task A pointer to the task (this task) whose run method is to be called
 */

void TaskBase::_call_users_run_method (TaskBase* p_task)
{
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	00 d0       	rcall	.+0      	; 0x118e <_ZN8TaskBase22_call_users_run_methodEPS_+0x6>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
	// This is where the user's run() method is actually called
	p_task->run ();
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	fc 01       	movw	r30, r24
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 81       	ld	r18, Z
    11a4:	31 81       	ldd	r19, Z+1	; 0x01
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	f9 01       	movw	r30, r18
    11ac:	09 95       	icall
		void* temp_handle = p_task->handle;
		p_task->handle = 0;
		vTaskDelete (temp_handle);
	// If task deletion is disabled, set this task's handle to 0 but don't delete task
	#else
		p_task->handle = 0;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	fc 01       	movw	r30, r24
    11b4:	13 82       	std	Z+3, r1	; 0x03
    11b6:	12 82       	std	Z+2, r1	; 0x02

	// If task deletion is not enabled, we get here if the task run method has exited 
	// (which it shouldn't have, though). 
	for (;;)
	{
		vTaskDelay (portMAX_DELAY);
    11b8:	6f ef       	ldi	r22, 0xFF	; 255
    11ba:	7f ef       	ldi	r23, 0xFF	; 255
    11bc:	cb 01       	movw	r24, r22
    11be:	0e 94 0f 0a 	call	0x141e	; 0x141e <vTaskDelay>
		p_task->handle = 0;
	#endif

	// If task deletion is not enabled, we get here if the task run method has exited 
	// (which it shouldn't have, though). 
	for (;;)
    11c2:	fa cf       	rjmp	.-12     	; 0x11b8 <_ZN8TaskBase22_call_users_run_methodEPS_+0x30>

000011c4 <_ZN8TaskBase12print_statusER8emstream>:
 *  information. 
 *  @param ser_dev A reference to the serial device to which to print the task status
 */

void TaskBase::print_status (emstream& ser_dev)
{
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <_ZN8TaskBase12print_statusER8emstream+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <_ZN8TaskBase12print_statusER8emstream+0x8>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	7c 83       	std	Y+4, r23	; 0x04
    11d6:	6b 83       	std	Y+3, r22	; 0x03
	ser_dev.puts (pcTaskGetTaskName (handle));
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	fc 01       	movw	r30, r24
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <pcTaskGetTaskName>
    11e6:	9c 01       	movw	r18, r24
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	b9 01       	movw	r22, r18
    11ee:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN8emstream4putsEPKc>
	ser_dev.putchar ('\t');
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	02 96       	adiw	r24, 0x02	; 2
    11fe:	fc 01       	movw	r30, r24
    1200:	20 81       	ld	r18, Z
    1202:	31 81       	ldd	r19, Z+1	; 0x01
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	69 e0       	ldi	r22, 0x09	; 9
    120a:	f9 01       	movw	r30, r18
    120c:	09 95       	icall
	if (strlen ((const char*)(pcTaskGetTaskName (handle))) < 8)
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	fc 01       	movw	r30, r24
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <pcTaskGetTaskName>
    121c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <strlen>
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	08 97       	sbiw	r24, 0x08	; 8
    1224:	08 f0       	brcs	.+2      	; 0x1228 <_ZN8TaskBase12print_statusER8emstream+0x64>
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	22 23       	and	r18, r18
    122a:	71 f0       	breq	.+28     	; 0x1248 <_ZN8TaskBase12print_statusER8emstream+0x84>
	{
		ser_dev.putchar ('\t');
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	fc 01       	movw	r30, r24
    1232:	80 81       	ld	r24, Z
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	02 96       	adiw	r24, 0x02	; 2
    1238:	fc 01       	movw	r30, r24
    123a:	20 81       	ld	r18, Z
    123c:	31 81       	ldd	r19, Z+1	; 0x01
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	69 e0       	ldi	r22, 0x09	; 9
    1244:	f9 01       	movw	r30, r18
    1246:	09 95       	icall
			<< PMS ("\t") << uxTaskGetStackHighWaterMark(handle) << PMS ("/") 
			<< (size_t)(get_total_stack ()) << PMS ("\t")
		#endif
			<< PMS ("\t") << runs;
	***/
}
    1248:	00 00       	nop
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	08 95       	ret

00001258 <xTaskGenericCreate>:
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );

		return uxReturn;
	}
    1258:	af 92       	push	r10
    125a:	bf 92       	push	r11
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	64 97       	sbiw	r28, 0x14	; 20
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	9f 83       	std	Y+7, r25	; 0x07
    127e:	8e 83       	std	Y+6, r24	; 0x06
    1280:	79 87       	std	Y+9, r23	; 0x09
    1282:	68 87       	std	Y+8, r22	; 0x08
    1284:	5b 87       	std	Y+11, r21	; 0x0b
    1286:	4a 87       	std	Y+10, r20	; 0x0a
    1288:	3d 87       	std	Y+13, r19	; 0x0d
    128a:	2c 87       	std	Y+12, r18	; 0x0c
    128c:	0e 87       	std	Y+14, r16	; 0x0e
    128e:	f8 8a       	std	Y+16, r15	; 0x10
    1290:	ef 86       	std	Y+15, r14	; 0x0f
    1292:	da 8a       	std	Y+18, r13	; 0x12
    1294:	c9 8a       	std	Y+17, r12	; 0x11
    1296:	bc 8a       	std	Y+20, r11	; 0x14
    1298:	ab 8a       	std	Y+19, r10	; 0x13
    129a:	29 89       	ldd	r18, Y+17	; 0x11
    129c:	3a 89       	ldd	r19, Y+18	; 0x12
    129e:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12a2:	b9 01       	movw	r22, r18
    12a4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prvAllocateTCBAndStack>
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	8a 83       	std	Y+2, r24	; 0x02
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	9b 81       	ldd	r25, Y+3	; 0x03
    12b0:	89 2b       	or	r24, r25
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <xTaskGenericCreate+0x5e>
    12b4:	8e c0       	rjmp	.+284    	; 0x13d2 <xTaskGenericCreate+0x17a>
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	fc 01       	movw	r30, r24
    12bc:	23 8d       	ldd	r18, Z+27	; 0x1b
    12be:	34 8d       	ldd	r19, Z+28	; 0x1c
    12c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	82 0f       	add	r24, r18
    12c8:	93 1f       	adc	r25, r19
    12ca:	9d 83       	std	Y+5, r25	; 0x05
    12cc:	8c 83       	std	Y+4, r24	; 0x04
    12ce:	4a 85       	ldd	r20, Y+10	; 0x0a
    12d0:	5b 85       	ldd	r21, Y+11	; 0x0b
    12d2:	2b 89       	ldd	r18, Y+19	; 0x13
    12d4:	3c 89       	ldd	r19, Y+20	; 0x14
    12d6:	68 85       	ldd	r22, Y+8	; 0x08
    12d8:	79 85       	ldd	r23, Y+9	; 0x09
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	8a 01       	movw	r16, r20
    12e0:	4e 85       	ldd	r20, Y+14	; 0x0e
    12e2:	0e 94 98 0c 	call	0x1930	; 0x1930 <prvInitialiseTCBVariables>
    12e6:	4c 85       	ldd	r20, Y+12	; 0x0c
    12e8:	5d 85       	ldd	r21, Y+13	; 0x0d
    12ea:	2e 81       	ldd	r18, Y+6	; 0x06
    12ec:	3f 81       	ldd	r19, Y+7	; 0x07
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	b9 01       	movw	r22, r18
    12f4:	0e 94 ef 04 	call	0x9de	; 0x9de <pxPortInitialiseStack>
    12f8:	9c 01       	movw	r18, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	fc 01       	movw	r30, r24
    1300:	31 83       	std	Z+1, r19	; 0x01
    1302:	20 83       	st	Z, r18
    1304:	8f 85       	ldd	r24, Y+15	; 0x0f
    1306:	98 89       	ldd	r25, Y+16	; 0x10
    1308:	89 2b       	or	r24, r25
    130a:	39 f0       	breq	.+14     	; 0x131a <xTaskGenericCreate+0xc2>
    130c:	8f 85       	ldd	r24, Y+15	; 0x0f
    130e:	98 89       	ldd	r25, Y+16	; 0x10
    1310:	2a 81       	ldd	r18, Y+2	; 0x02
    1312:	3b 81       	ldd	r19, Y+3	; 0x03
    1314:	fc 01       	movw	r30, r24
    1316:	31 83       	std	Z+1, r19	; 0x01
    1318:	20 83       	st	Z, r18
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	0f 92       	push	r0
    1320:	80 91 04 0c 	lds	r24, 0x0C04	; 0x800c04 <uxCurrentNumberOfTasks>
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	80 93 04 0c 	sts	0x0C04, r24	; 0x800c04 <uxCurrentNumberOfTasks>
    132a:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    132e:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    1332:	89 2b       	or	r24, r25
    1334:	69 f4       	brne	.+26     	; 0x1350 <xTaskGenericCreate+0xf8>
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	90 93 b2 0b 	sts	0x0BB2, r25	; 0x800bb2 <pxCurrentTCB+0x1>
    133e:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <pxCurrentTCB>
    1342:	80 91 04 0c 	lds	r24, 0x0C04	; 0x800c04 <uxCurrentNumberOfTasks>
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	b1 f4       	brne	.+44     	; 0x1376 <xTaskGenericCreate+0x11e>
    134a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <prvInitialiseTaskLists>
    134e:	13 c0       	rjmp	.+38     	; 0x1376 <xTaskGenericCreate+0x11e>
    1350:	80 91 0a 0c 	lds	r24, 0x0C0A	; 0x800c0a <xSchedulerRunning>
    1354:	88 23       	and	r24, r24
    1356:	79 f4       	brne	.+30     	; 0x1376 <xTaskGenericCreate+0x11e>
    1358:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    135c:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    1360:	fc 01       	movw	r30, r24
    1362:	92 8d       	ldd	r25, Z+26	; 0x1a
    1364:	8e 85       	ldd	r24, Y+14	; 0x0e
    1366:	89 17       	cp	r24, r25
    1368:	30 f0       	brcs	.+12     	; 0x1376 <xTaskGenericCreate+0x11e>
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	9b 81       	ldd	r25, Y+3	; 0x03
    136e:	90 93 b2 0b 	sts	0x0BB2, r25	; 0x800bb2 <pxCurrentTCB+0x1>
    1372:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <pxCurrentTCB>
    1376:	80 91 0e 0c 	lds	r24, 0x0C0E	; 0x800c0e <uxTaskNumber>
    137a:	8f 5f       	subi	r24, 0xFF	; 255
    137c:	80 93 0e 0c 	sts	0x0C0E, r24	; 0x800c0e <uxTaskNumber>
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	9b 81       	ldd	r25, Y+3	; 0x03
    1384:	fc 01       	movw	r30, r24
    1386:	92 8d       	ldd	r25, Z+26	; 0x1a
    1388:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <uxTopReadyPriority>
    138c:	89 17       	cp	r24, r25
    138e:	30 f4       	brcc	.+12     	; 0x139c <xTaskGenericCreate+0x144>
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	fc 01       	movw	r30, r24
    1396:	82 8d       	ldd	r24, Z+26	; 0x1a
    1398:	80 93 09 0c 	sts	0x0C09, r24	; 0x800c09 <uxTopReadyPriority>
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	ac 01       	movw	r20, r24
    13a2:	4e 5f       	subi	r20, 0xFE	; 254
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	fc 01       	movw	r30, r24
    13ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	6b e0       	ldi	r22, 0x0B	; 11
    13b4:	62 9f       	mul	r22, r18
    13b6:	c0 01       	movw	r24, r0
    13b8:	63 9f       	mul	r22, r19
    13ba:	90 0d       	add	r25, r0
    13bc:	11 24       	eor	r1, r1
    13be:	8d 54       	subi	r24, 0x4D	; 77
    13c0:	94 4f       	sbci	r25, 0xF4	; 244
    13c2:	ba 01       	movw	r22, r20
    13c4:	0e 94 aa 03 	call	0x754	; 0x754 <vListInsertEnd>
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <xTaskGenericCreate+0x17e>
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	79 f4       	brne	.+30     	; 0x13fa <xTaskGenericCreate+0x1a2>
    13dc:	80 91 0a 0c 	lds	r24, 0x0C0A	; 0x800c0a <xSchedulerRunning>
    13e0:	88 23       	and	r24, r24
    13e2:	59 f0       	breq	.+22     	; 0x13fa <xTaskGenericCreate+0x1a2>
    13e4:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    13e8:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    13ec:	fc 01       	movw	r30, r24
    13ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    13f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13f2:	98 17       	cp	r25, r24
    13f4:	10 f4       	brcc	.+4      	; 0x13fa <xTaskGenericCreate+0x1a2>
    13f6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <vPortYield>
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	64 96       	adiw	r28, 0x14	; 20
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	08 95       	ret

0000141e <vTaskDelay>:
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	29 97       	sbiw	r28, 0x09	; 9
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	6e 83       	std	Y+6, r22	; 0x06
    1434:	7f 83       	std	Y+7, r23	; 0x07
    1436:	88 87       	std	Y+8, r24	; 0x08
    1438:	99 87       	std	Y+9, r25	; 0x09
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	8e 81       	ldd	r24, Y+6	; 0x06
    143e:	9f 81       	ldd	r25, Y+7	; 0x07
    1440:	a8 85       	ldd	r26, Y+8	; 0x08
    1442:	b9 85       	ldd	r27, Y+9	; 0x09
    1444:	89 2b       	or	r24, r25
    1446:	8a 2b       	or	r24, r26
    1448:	8b 2b       	or	r24, r27
    144a:	41 f1       	breq	.+80     	; 0x149c <vTaskDelay+0x7e>
    144c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <vTaskSuspendAll>
    1450:	20 91 05 0c 	lds	r18, 0x0C05	; 0x800c05 <xTickCount>
    1454:	30 91 06 0c 	lds	r19, 0x0C06	; 0x800c06 <xTickCount+0x1>
    1458:	40 91 07 0c 	lds	r20, 0x0C07	; 0x800c07 <xTickCount+0x2>
    145c:	50 91 08 0c 	lds	r21, 0x0C08	; 0x800c08 <xTickCount+0x3>
    1460:	8e 81       	ldd	r24, Y+6	; 0x06
    1462:	9f 81       	ldd	r25, Y+7	; 0x07
    1464:	a8 85       	ldd	r26, Y+8	; 0x08
    1466:	b9 85       	ldd	r27, Y+9	; 0x09
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	a4 1f       	adc	r26, r20
    146e:	b5 1f       	adc	r27, r21
    1470:	8a 83       	std	Y+2, r24	; 0x02
    1472:	9b 83       	std	Y+3, r25	; 0x03
    1474:	ac 83       	std	Y+4, r26	; 0x04
    1476:	bd 83       	std	Y+5, r27	; 0x05
    1478:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    147c:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    1480:	02 96       	adiw	r24, 0x02	; 2
    1482:	0e 94 80 04 	call	0x900	; 0x900 <uxListRemove>
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	ac 81       	ldd	r26, Y+4	; 0x04
    148c:	bd 81       	ldd	r27, Y+5	; 0x05
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <prvAddCurrentTaskToDelayedList>
    1496:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <xTaskResumeAll>
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	88 23       	and	r24, r24
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <vTaskDelay+0x88>
    14a2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <vPortYield>
    14a6:	00 00       	nop
    14a8:	29 96       	adiw	r28, 0x09	; 9
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	08 95       	ret

000014ba <vTaskSuspendAll>:
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <uxSchedulerSuspended>
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	80 93 0f 0c 	sts	0x0C0F, r24	; 0x800c0f <uxSchedulerSuspended>
    14cc:	00 00       	nop
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <xTaskResumeAll>:
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	00 d0       	rcall	.+0      	; 0x14da <xTaskResumeAll+0x6>
    14da:	1f 92       	push	r1
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	0f 92       	push	r0
    14e8:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <uxSchedulerSuspended>
    14ec:	81 50       	subi	r24, 0x01	; 1
    14ee:	80 93 0f 0c 	sts	0x0C0F, r24	; 0x800c0f <uxSchedulerSuspended>
    14f2:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <uxSchedulerSuspended>
    14f6:	88 23       	and	r24, r24
    14f8:	09 f0       	breq	.+2      	; 0x14fc <xTaskResumeAll+0x28>
    14fa:	6e c0       	rjmp	.+220    	; 0x15d8 <xTaskResumeAll+0x104>
    14fc:	80 91 04 0c 	lds	r24, 0x0C04	; 0x800c04 <uxCurrentNumberOfTasks>
    1500:	88 23       	and	r24, r24
    1502:	09 f4       	brne	.+2      	; 0x1506 <xTaskResumeAll+0x32>
    1504:	69 c0       	rjmp	.+210    	; 0x15d8 <xTaskResumeAll+0x104>
    1506:	46 c0       	rjmp	.+140    	; 0x1594 <xTaskResumeAll+0xc0>
    1508:	80 91 00 0c 	lds	r24, 0x0C00	; 0x800c00 <xPendingReadyList+0x7>
    150c:	90 91 01 0c 	lds	r25, 0x0C01	; 0x800c01 <xPendingReadyList+0x8>
    1510:	fc 01       	movw	r30, r24
    1512:	80 85       	ldd	r24, Z+8	; 0x08
    1514:	91 85       	ldd	r25, Z+9	; 0x09
    1516:	9b 83       	std	Y+3, r25	; 0x03
    1518:	8a 83       	std	Y+2, r24	; 0x02
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	9b 81       	ldd	r25, Y+3	; 0x03
    151e:	0e 96       	adiw	r24, 0x0e	; 14
    1520:	0e 94 80 04 	call	0x900	; 0x900 <uxListRemove>
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	02 96       	adiw	r24, 0x02	; 2
    152a:	0e 94 80 04 	call	0x900	; 0x900 <uxListRemove>
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	fc 01       	movw	r30, r24
    1534:	92 8d       	ldd	r25, Z+26	; 0x1a
    1536:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <uxTopReadyPriority>
    153a:	89 17       	cp	r24, r25
    153c:	30 f4       	brcc	.+12     	; 0x154a <xTaskResumeAll+0x76>
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	9b 81       	ldd	r25, Y+3	; 0x03
    1542:	fc 01       	movw	r30, r24
    1544:	82 8d       	ldd	r24, Z+26	; 0x1a
    1546:	80 93 09 0c 	sts	0x0C09, r24	; 0x800c09 <uxTopReadyPriority>
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	ac 01       	movw	r20, r24
    1550:	4e 5f       	subi	r20, 0xFE	; 254
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	9b 81       	ldd	r25, Y+3	; 0x03
    1558:	fc 01       	movw	r30, r24
    155a:	82 8d       	ldd	r24, Z+26	; 0x1a
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	6b e0       	ldi	r22, 0x0B	; 11
    1562:	62 9f       	mul	r22, r18
    1564:	c0 01       	movw	r24, r0
    1566:	63 9f       	mul	r22, r19
    1568:	90 0d       	add	r25, r0
    156a:	11 24       	eor	r1, r1
    156c:	8d 54       	subi	r24, 0x4D	; 77
    156e:	94 4f       	sbci	r25, 0xF4	; 244
    1570:	ba 01       	movw	r22, r20
    1572:	0e 94 aa 03 	call	0x754	; 0x754 <vListInsertEnd>
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	fc 01       	movw	r30, r24
    157c:	22 8d       	ldd	r18, Z+26	; 0x1a
    157e:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    1582:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    1586:	fc 01       	movw	r30, r24
    1588:	82 8d       	ldd	r24, Z+26	; 0x1a
    158a:	28 17       	cp	r18, r24
    158c:	18 f0       	brcs	.+6      	; 0x1594 <xTaskResumeAll+0xc0>
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	80 93 0c 0c 	sts	0x0C0C, r24	; 0x800c0c <xYieldPending>
    1594:	80 91 f9 0b 	lds	r24, 0x0BF9	; 0x800bf9 <xPendingReadyList>
    1598:	88 23       	and	r24, r24
    159a:	09 f0       	breq	.+2      	; 0x159e <xTaskResumeAll+0xca>
    159c:	b5 cf       	rjmp	.-150    	; 0x1508 <xTaskResumeAll+0x34>
    159e:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <uxPendedTicks>
    15a2:	88 23       	and	r24, r24
    15a4:	89 f0       	breq	.+34     	; 0x15c8 <xTaskResumeAll+0xf4>
    15a6:	0c c0       	rjmp	.+24     	; 0x15c0 <xTaskResumeAll+0xec>
    15a8:	0e 94 14 0b 	call	0x1628	; 0x1628 <xTaskIncrementTick>
    15ac:	88 23       	and	r24, r24
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <xTaskResumeAll+0xe2>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	80 93 0c 0c 	sts	0x0C0C, r24	; 0x800c0c <xYieldPending>
    15b6:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <uxPendedTicks>
    15ba:	81 50       	subi	r24, 0x01	; 1
    15bc:	80 93 0b 0c 	sts	0x0C0B, r24	; 0x800c0b <uxPendedTicks>
    15c0:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <uxPendedTicks>
    15c4:	88 23       	and	r24, r24
    15c6:	81 f7       	brne	.-32     	; 0x15a8 <xTaskResumeAll+0xd4>
    15c8:	80 91 0c 0c 	lds	r24, 0x0C0C	; 0x800c0c <xYieldPending>
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <xTaskResumeAll+0x104>
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <vPortYield>
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <pcTaskGetTaskName>:
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <pcTaskGetTaskName+0x6>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <pcTaskGetTaskName+0x8>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	89 2b       	or	r24, r25
    1600:	29 f4       	brne	.+10     	; 0x160c <pcTaskGetTaskName+0x22>
    1602:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    1606:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <pcTaskGetTaskName+0x26>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	4d 96       	adiw	r24, 0x1d	; 29
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <xTaskIncrementTick>:
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	2d 97       	sbiw	r28, 0x0d	; 13
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	19 82       	std	Y+1, r1	; 0x01
    163e:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <uxSchedulerSuspended>
    1642:	88 23       	and	r24, r24
    1644:	09 f0       	breq	.+2      	; 0x1648 <xTaskIncrementTick+0x20>
    1646:	f5 c0       	rjmp	.+490    	; 0x1832 <xTaskIncrementTick+0x20a>
    1648:	80 91 05 0c 	lds	r24, 0x0C05	; 0x800c05 <xTickCount>
    164c:	90 91 06 0c 	lds	r25, 0x0C06	; 0x800c06 <xTickCount+0x1>
    1650:	a0 91 07 0c 	lds	r26, 0x0C07	; 0x800c07 <xTickCount+0x2>
    1654:	b0 91 08 0c 	lds	r27, 0x0C08	; 0x800c08 <xTickCount+0x3>
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	a1 1d       	adc	r26, r1
    165c:	b1 1d       	adc	r27, r1
    165e:	80 93 05 0c 	sts	0x0C05, r24	; 0x800c05 <xTickCount>
    1662:	90 93 06 0c 	sts	0x0C06, r25	; 0x800c06 <xTickCount+0x1>
    1666:	a0 93 07 0c 	sts	0x0C07, r26	; 0x800c07 <xTickCount+0x2>
    166a:	b0 93 08 0c 	sts	0x0C08, r27	; 0x800c08 <xTickCount+0x3>
    166e:	80 91 05 0c 	lds	r24, 0x0C05	; 0x800c05 <xTickCount>
    1672:	90 91 06 0c 	lds	r25, 0x0C06	; 0x800c06 <xTickCount+0x1>
    1676:	a0 91 07 0c 	lds	r26, 0x0C07	; 0x800c07 <xTickCount+0x2>
    167a:	b0 91 08 0c 	lds	r27, 0x0C08	; 0x800c08 <xTickCount+0x3>
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	9b 83       	std	Y+3, r25	; 0x03
    1682:	ac 83       	std	Y+4, r26	; 0x04
    1684:	bd 83       	std	Y+5, r27	; 0x05
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	9b 81       	ldd	r25, Y+3	; 0x03
    168a:	ac 81       	ldd	r26, Y+4	; 0x04
    168c:	bd 81       	ldd	r27, Y+5	; 0x05
    168e:	89 2b       	or	r24, r25
    1690:	8a 2b       	or	r24, r26
    1692:	8b 2b       	or	r24, r27
    1694:	d9 f4       	brne	.+54     	; 0x16cc <xTaskIncrementTick+0xa4>
    1696:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <pxDelayedTaskList>
    169a:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <pxDelayedTaskList+0x1>
    169e:	9f 83       	std	Y+7, r25	; 0x07
    16a0:	8e 83       	std	Y+6, r24	; 0x06
    16a2:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <pxOverflowDelayedTaskList>
    16a6:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <pxOverflowDelayedTaskList+0x1>
    16aa:	90 93 f6 0b 	sts	0x0BF6, r25	; 0x800bf6 <pxDelayedTaskList+0x1>
    16ae:	80 93 f5 0b 	sts	0x0BF5, r24	; 0x800bf5 <pxDelayedTaskList>
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	9f 81       	ldd	r25, Y+7	; 0x07
    16b6:	90 93 f8 0b 	sts	0x0BF8, r25	; 0x800bf8 <pxOverflowDelayedTaskList+0x1>
    16ba:	80 93 f7 0b 	sts	0x0BF7, r24	; 0x800bf7 <pxOverflowDelayedTaskList>
    16be:	80 91 0d 0c 	lds	r24, 0x0C0D	; 0x800c0d <xNumOfOverflows>
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	80 93 0d 0c 	sts	0x0C0D, r24	; 0x800c0d <xNumOfOverflows>
    16c8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <prvResetNextTaskUnblockTime>
    16cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
    16d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
    16d4:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <xNextTaskUnblockTime+0x2>
    16d8:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <xNextTaskUnblockTime+0x3>
    16dc:	2a 81       	ldd	r18, Y+2	; 0x02
    16de:	3b 81       	ldd	r19, Y+3	; 0x03
    16e0:	4c 81       	ldd	r20, Y+4	; 0x04
    16e2:	5d 81       	ldd	r21, Y+5	; 0x05
    16e4:	28 17       	cp	r18, r24
    16e6:	39 07       	cpc	r19, r25
    16e8:	4a 07       	cpc	r20, r26
    16ea:	5b 07       	cpc	r21, r27
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <xTaskIncrementTick+0xc8>
    16ee:	8a c0       	rjmp	.+276    	; 0x1804 <xTaskIncrementTick+0x1dc>
    16f0:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <pxDelayedTaskList>
    16f4:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <pxDelayedTaskList+0x1>
    16f8:	fc 01       	movw	r30, r24
    16fa:	80 81       	ld	r24, Z
    16fc:	88 23       	and	r24, r24
    16fe:	61 f4       	brne	.+24     	; 0x1718 <xTaskIncrementTick+0xf0>
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	9f ef       	ldi	r25, 0xFF	; 255
    1704:	dc 01       	movw	r26, r24
    1706:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
    170a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
    170e:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <xNextTaskUnblockTime+0x2>
    1712:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <xNextTaskUnblockTime+0x3>
    1716:	76 c0       	rjmp	.+236    	; 0x1804 <xTaskIncrementTick+0x1dc>
    1718:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <pxDelayedTaskList>
    171c:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <pxDelayedTaskList+0x1>
    1720:	fc 01       	movw	r30, r24
    1722:	87 81       	ldd	r24, Z+7	; 0x07
    1724:	90 85       	ldd	r25, Z+8	; 0x08
    1726:	fc 01       	movw	r30, r24
    1728:	80 85       	ldd	r24, Z+8	; 0x08
    172a:	91 85       	ldd	r25, Z+9	; 0x09
    172c:	99 87       	std	Y+9, r25	; 0x09
    172e:	88 87       	std	Y+8, r24	; 0x08
    1730:	88 85       	ldd	r24, Y+8	; 0x08
    1732:	99 85       	ldd	r25, Y+9	; 0x09
    1734:	fc 01       	movw	r30, r24
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	a4 81       	ldd	r26, Z+4	; 0x04
    173c:	b5 81       	ldd	r27, Z+5	; 0x05
    173e:	8a 87       	std	Y+10, r24	; 0x0a
    1740:	9b 87       	std	Y+11, r25	; 0x0b
    1742:	ac 87       	std	Y+12, r26	; 0x0c
    1744:	bd 87       	std	Y+13, r27	; 0x0d
    1746:	2a 81       	ldd	r18, Y+2	; 0x02
    1748:	3b 81       	ldd	r19, Y+3	; 0x03
    174a:	4c 81       	ldd	r20, Y+4	; 0x04
    174c:	5d 81       	ldd	r21, Y+5	; 0x05
    174e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1750:	9b 85       	ldd	r25, Y+11	; 0x0b
    1752:	ac 85       	ldd	r26, Y+12	; 0x0c
    1754:	bd 85       	ldd	r27, Y+13	; 0x0d
    1756:	28 17       	cp	r18, r24
    1758:	39 07       	cpc	r19, r25
    175a:	4a 07       	cpc	r20, r26
    175c:	5b 07       	cpc	r21, r27
    175e:	68 f4       	brcc	.+26     	; 0x177a <xTaskIncrementTick+0x152>
    1760:	8a 85       	ldd	r24, Y+10	; 0x0a
    1762:	9b 85       	ldd	r25, Y+11	; 0x0b
    1764:	ac 85       	ldd	r26, Y+12	; 0x0c
    1766:	bd 85       	ldd	r27, Y+13	; 0x0d
    1768:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
    176c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
    1770:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <xNextTaskUnblockTime+0x2>
    1774:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <xNextTaskUnblockTime+0x3>
    1778:	45 c0       	rjmp	.+138    	; 0x1804 <xTaskIncrementTick+0x1dc>
    177a:	88 85       	ldd	r24, Y+8	; 0x08
    177c:	99 85       	ldd	r25, Y+9	; 0x09
    177e:	02 96       	adiw	r24, 0x02	; 2
    1780:	0e 94 80 04 	call	0x900	; 0x900 <uxListRemove>
    1784:	88 85       	ldd	r24, Y+8	; 0x08
    1786:	99 85       	ldd	r25, Y+9	; 0x09
    1788:	fc 01       	movw	r30, r24
    178a:	80 8d       	ldd	r24, Z+24	; 0x18
    178c:	91 8d       	ldd	r25, Z+25	; 0x19
    178e:	89 2b       	or	r24, r25
    1790:	29 f0       	breq	.+10     	; 0x179c <xTaskIncrementTick+0x174>
    1792:	88 85       	ldd	r24, Y+8	; 0x08
    1794:	99 85       	ldd	r25, Y+9	; 0x09
    1796:	0e 96       	adiw	r24, 0x0e	; 14
    1798:	0e 94 80 04 	call	0x900	; 0x900 <uxListRemove>
    179c:	88 85       	ldd	r24, Y+8	; 0x08
    179e:	99 85       	ldd	r25, Y+9	; 0x09
    17a0:	fc 01       	movw	r30, r24
    17a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    17a4:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <uxTopReadyPriority>
    17a8:	89 17       	cp	r24, r25
    17aa:	30 f4       	brcc	.+12     	; 0x17b8 <xTaskIncrementTick+0x190>
    17ac:	88 85       	ldd	r24, Y+8	; 0x08
    17ae:	99 85       	ldd	r25, Y+9	; 0x09
    17b0:	fc 01       	movw	r30, r24
    17b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    17b4:	80 93 09 0c 	sts	0x0C09, r24	; 0x800c09 <uxTopReadyPriority>
    17b8:	88 85       	ldd	r24, Y+8	; 0x08
    17ba:	99 85       	ldd	r25, Y+9	; 0x09
    17bc:	ac 01       	movw	r20, r24
    17be:	4e 5f       	subi	r20, 0xFE	; 254
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	88 85       	ldd	r24, Y+8	; 0x08
    17c4:	99 85       	ldd	r25, Y+9	; 0x09
    17c6:	fc 01       	movw	r30, r24
    17c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	6b e0       	ldi	r22, 0x0B	; 11
    17d0:	62 9f       	mul	r22, r18
    17d2:	c0 01       	movw	r24, r0
    17d4:	63 9f       	mul	r22, r19
    17d6:	90 0d       	add	r25, r0
    17d8:	11 24       	eor	r1, r1
    17da:	8d 54       	subi	r24, 0x4D	; 77
    17dc:	94 4f       	sbci	r25, 0xF4	; 244
    17de:	ba 01       	movw	r22, r20
    17e0:	0e 94 aa 03 	call	0x754	; 0x754 <vListInsertEnd>
    17e4:	88 85       	ldd	r24, Y+8	; 0x08
    17e6:	99 85       	ldd	r25, Y+9	; 0x09
    17e8:	fc 01       	movw	r30, r24
    17ea:	22 8d       	ldd	r18, Z+26	; 0x1a
    17ec:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    17f0:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    17f4:	fc 01       	movw	r30, r24
    17f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    17f8:	28 17       	cp	r18, r24
    17fa:	08 f4       	brcc	.+2      	; 0x17fe <xTaskIncrementTick+0x1d6>
    17fc:	79 cf       	rjmp	.-270    	; 0x16f0 <xTaskIncrementTick+0xc8>
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	76 cf       	rjmp	.-276    	; 0x16f0 <xTaskIncrementTick+0xc8>
    1804:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    1808:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    180c:	fc 01       	movw	r30, r24
    180e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4b e0       	ldi	r20, 0x0B	; 11
    1816:	42 9f       	mul	r20, r18
    1818:	c0 01       	movw	r24, r0
    181a:	43 9f       	mul	r20, r19
    181c:	90 0d       	add	r25, r0
    181e:	11 24       	eor	r1, r1
    1820:	8d 54       	subi	r24, 0x4D	; 77
    1822:	94 4f       	sbci	r25, 0xF4	; 244
    1824:	fc 01       	movw	r30, r24
    1826:	80 81       	ld	r24, Z
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	40 f0       	brcs	.+16     	; 0x183c <xTaskIncrementTick+0x214>
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	05 c0       	rjmp	.+10     	; 0x183c <xTaskIncrementTick+0x214>
    1832:	80 91 0b 0c 	lds	r24, 0x0C0B	; 0x800c0b <uxPendedTicks>
    1836:	8f 5f       	subi	r24, 0xFF	; 255
    1838:	80 93 0b 0c 	sts	0x0C0B, r24	; 0x800c0b <uxPendedTicks>
    183c:	80 91 0c 0c 	lds	r24, 0x0C0C	; 0x800c0c <xYieldPending>
    1840:	88 23       	and	r24, r24
    1842:	11 f0       	breq	.+4      	; 0x1848 <xTaskIncrementTick+0x220>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	2d 96       	adiw	r28, 0x0d	; 13
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	08 95       	ret

0000185c <vTaskSwitchContext>:
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	00 d0       	rcall	.+0      	; 0x1862 <vTaskSwitchContext+0x6>
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <uxSchedulerSuspended>
    186a:	88 23       	and	r24, r24
    186c:	21 f0       	breq	.+8      	; 0x1876 <vTaskSwitchContext+0x1a>
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	80 93 0c 0c 	sts	0x0C0C, r24	; 0x800c0c <xYieldPending>
    1874:	57 c0       	rjmp	.+174    	; 0x1924 <vTaskSwitchContext+0xc8>
    1876:	10 92 0c 0c 	sts	0x0C0C, r1	; 0x800c0c <xYieldPending>
    187a:	05 c0       	rjmp	.+10     	; 0x1886 <vTaskSwitchContext+0x2a>
    187c:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <uxTopReadyPriority>
    1880:	81 50       	subi	r24, 0x01	; 1
    1882:	80 93 09 0c 	sts	0x0C09, r24	; 0x800c09 <uxTopReadyPriority>
    1886:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <uxTopReadyPriority>
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4b e0       	ldi	r20, 0x0B	; 11
    1890:	42 9f       	mul	r20, r18
    1892:	c0 01       	movw	r24, r0
    1894:	43 9f       	mul	r20, r19
    1896:	90 0d       	add	r25, r0
    1898:	11 24       	eor	r1, r1
    189a:	8d 54       	subi	r24, 0x4D	; 77
    189c:	94 4f       	sbci	r25, 0xF4	; 244
    189e:	fc 01       	movw	r30, r24
    18a0:	80 81       	ld	r24, Z
    18a2:	88 23       	and	r24, r24
    18a4:	59 f3       	breq	.-42     	; 0x187c <vTaskSwitchContext+0x20>
    18a6:	80 91 09 0c 	lds	r24, 0x0C09	; 0x800c09 <uxTopReadyPriority>
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4b e0       	ldi	r20, 0x0B	; 11
    18b0:	42 9f       	mul	r20, r18
    18b2:	c0 01       	movw	r24, r0
    18b4:	43 9f       	mul	r20, r19
    18b6:	90 0d       	add	r25, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	8d 54       	subi	r24, 0x4D	; 77
    18bc:	94 4f       	sbci	r25, 0xF4	; 244
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	fc 01       	movw	r30, r24
    18c8:	81 81       	ldd	r24, Z+1	; 0x01
    18ca:	92 81       	ldd	r25, Z+2	; 0x02
    18cc:	fc 01       	movw	r30, r24
    18ce:	24 81       	ldd	r18, Z+4	; 0x04
    18d0:	35 81       	ldd	r19, Z+5	; 0x05
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	fc 01       	movw	r30, r24
    18d8:	32 83       	std	Z+2, r19	; 0x02
    18da:	21 83       	std	Z+1, r18	; 0x01
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	fc 01       	movw	r30, r24
    18e2:	21 81       	ldd	r18, Z+1	; 0x01
    18e4:	32 81       	ldd	r19, Z+2	; 0x02
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	03 96       	adiw	r24, 0x03	; 3
    18ec:	28 17       	cp	r18, r24
    18ee:	39 07       	cpc	r19, r25
    18f0:	69 f4       	brne	.+26     	; 0x190c <vTaskSwitchContext+0xb0>
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	fc 01       	movw	r30, r24
    18f8:	81 81       	ldd	r24, Z+1	; 0x01
    18fa:	92 81       	ldd	r25, Z+2	; 0x02
    18fc:	fc 01       	movw	r30, r24
    18fe:	24 81       	ldd	r18, Z+4	; 0x04
    1900:	35 81       	ldd	r19, Z+5	; 0x05
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	fc 01       	movw	r30, r24
    1908:	32 83       	std	Z+2, r19	; 0x02
    190a:	21 83       	std	Z+1, r18	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	fc 01       	movw	r30, r24
    1912:	81 81       	ldd	r24, Z+1	; 0x01
    1914:	92 81       	ldd	r25, Z+2	; 0x02
    1916:	fc 01       	movw	r30, r24
    1918:	80 85       	ldd	r24, Z+8	; 0x08
    191a:	91 85       	ldd	r25, Z+9	; 0x09
    191c:	90 93 b2 0b 	sts	0x0BB2, r25	; 0x800bb2 <pxCurrentTCB+0x1>
    1920:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <pxCurrentTCB>
    1924:	00 00       	nop
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	08 95       	ret

00001930 <prvInitialiseTCBVariables>:
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	2a 97       	sbiw	r28, 0x0a	; 10
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	9b 83       	std	Y+3, r25	; 0x03
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	7d 83       	std	Y+5, r23	; 0x05
    1952:	6c 83       	std	Y+4, r22	; 0x04
    1954:	4e 83       	std	Y+6, r20	; 0x06
    1956:	38 87       	std	Y+8, r19	; 0x08
    1958:	2f 83       	std	Y+7, r18	; 0x07
    195a:	1a 87       	std	Y+10, r17	; 0x0a
    195c:	09 87       	std	Y+9, r16	; 0x09
    195e:	19 82       	std	Y+1, r1	; 0x01
    1960:	21 c0       	rjmp	.+66     	; 0x19a4 <prvInitialiseTCBVariables+0x74>
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	29 81       	ldd	r18, Y+1	; 0x01
    196a:	22 2f       	mov	r18, r18
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	4c 81       	ldd	r20, Y+4	; 0x04
    1970:	5d 81       	ldd	r21, Y+5	; 0x05
    1972:	24 0f       	add	r18, r20
    1974:	35 1f       	adc	r19, r21
    1976:	f9 01       	movw	r30, r18
    1978:	40 81       	ld	r20, Z
    197a:	2a 81       	ldd	r18, Y+2	; 0x02
    197c:	3b 81       	ldd	r19, Y+3	; 0x03
    197e:	82 0f       	add	r24, r18
    1980:	93 1f       	adc	r25, r19
    1982:	4d 96       	adiw	r24, 0x1d	; 29
    1984:	fc 01       	movw	r30, r24
    1986:	40 83       	st	Z, r20
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	88 2f       	mov	r24, r24
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	2c 81       	ldd	r18, Y+4	; 0x04
    1990:	3d 81       	ldd	r19, Y+5	; 0x05
    1992:	82 0f       	add	r24, r18
    1994:	93 1f       	adc	r25, r19
    1996:	fc 01       	movw	r30, r24
    1998:	80 81       	ld	r24, Z
    199a:	88 23       	and	r24, r24
    199c:	39 f0       	breq	.+14     	; 0x19ac <prvInitialiseTCBVariables+0x7c>
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	8a 30       	cpi	r24, 0x0A	; 10
    19a8:	e0 f2       	brcs	.-72     	; 0x1962 <prvInitialiseTCBVariables+0x32>
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <prvInitialiseTCBVariables+0x7e>
    19ac:	00 00       	nop
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	fc 01       	movw	r30, r24
    19b4:	16 a2       	std	Z+38, r1	; 0x26
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	10 f0       	brcs	.+4      	; 0x19c0 <prvInitialiseTCBVariables+0x90>
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	8e 83       	std	Y+6, r24	; 0x06
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	2e 81       	ldd	r18, Y+6	; 0x06
    19c6:	fc 01       	movw	r30, r24
    19c8:	22 8f       	std	Z+26, r18	; 0x1a
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	2e 81       	ldd	r18, Y+6	; 0x06
    19d0:	fc 01       	movw	r30, r24
    19d2:	27 a3       	std	Z+39, r18	; 0x27
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	9b 81       	ldd	r25, Y+3	; 0x03
    19d8:	fc 01       	movw	r30, r24
    19da:	10 a6       	std	Z+40, r1	; 0x28
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	02 96       	adiw	r24, 0x02	; 2
    19e2:	0e 94 98 03 	call	0x730	; 0x730 <vListInitialiseItem>
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ea:	0e 96       	adiw	r24, 0x0e	; 14
    19ec:	0e 94 98 03 	call	0x730	; 0x730 <vListInitialiseItem>
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	2a 81       	ldd	r18, Y+2	; 0x02
    19f6:	3b 81       	ldd	r19, Y+3	; 0x03
    19f8:	fc 01       	movw	r30, r24
    19fa:	33 87       	std	Z+11, r19	; 0x0b
    19fc:	22 87       	std	Z+10, r18	; 0x0a
    19fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 e0       	ldi	r26, 0x00	; 0
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	24 e0       	ldi	r18, 0x04	; 4
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	79 01       	movw	r14, r18
    1a12:	8a 01       	movw	r16, r20
    1a14:	e8 1a       	sub	r14, r24
    1a16:	f9 0a       	sbc	r15, r25
    1a18:	0a 0b       	sbc	r16, r26
    1a1a:	1b 0b       	sbc	r17, r27
    1a1c:	d8 01       	movw	r26, r16
    1a1e:	c7 01       	movw	r24, r14
    1a20:	2a 81       	ldd	r18, Y+2	; 0x02
    1a22:	3b 81       	ldd	r19, Y+3	; 0x03
    1a24:	f9 01       	movw	r30, r18
    1a26:	86 87       	std	Z+14, r24	; 0x0e
    1a28:	97 87       	std	Z+15, r25	; 0x0f
    1a2a:	a0 8b       	std	Z+16, r26	; 0x10
    1a2c:	b1 8b       	std	Z+17, r27	; 0x11
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	2a 81       	ldd	r18, Y+2	; 0x02
    1a34:	3b 81       	ldd	r19, Y+3	; 0x03
    1a36:	fc 01       	movw	r30, r24
    1a38:	37 8b       	std	Z+23, r19	; 0x17
    1a3a:	26 8b       	std	Z+22, r18	; 0x16
    1a3c:	00 00       	nop
    1a3e:	2a 96       	adiw	r28, 0x0a	; 10
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	08 95       	ret

00001a58 <prvInitialiseTaskLists>:
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	1f 92       	push	r1
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	19 82       	std	Y+1, r1	; 0x01
    1a64:	10 c0       	rjmp	.+32     	; 0x1a86 <prvInitialiseTaskLists+0x2e>
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4b e0       	ldi	r20, 0x0B	; 11
    1a6e:	42 9f       	mul	r20, r18
    1a70:	c0 01       	movw	r24, r0
    1a72:	43 9f       	mul	r20, r19
    1a74:	90 0d       	add	r25, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	8d 54       	subi	r24, 0x4D	; 77
    1a7a:	94 4f       	sbci	r25, 0xF4	; 244
    1a7c:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	84 30       	cpi	r24, 0x04	; 4
    1a8a:	68 f3       	brcs	.-38     	; 0x1a66 <prvInitialiseTaskLists+0xe>
    1a8c:	8f ed       	ldi	r24, 0xDF	; 223
    1a8e:	9b e0       	ldi	r25, 0x0B	; 11
    1a90:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
    1a94:	8a ee       	ldi	r24, 0xEA	; 234
    1a96:	9b e0       	ldi	r25, 0x0B	; 11
    1a98:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
    1a9c:	89 ef       	ldi	r24, 0xF9	; 249
    1a9e:	9b e0       	ldi	r25, 0x0B	; 11
    1aa0:	0e 94 5f 03 	call	0x6be	; 0x6be <vListInitialise>
    1aa4:	8f ed       	ldi	r24, 0xDF	; 223
    1aa6:	9b e0       	ldi	r25, 0x0B	; 11
    1aa8:	90 93 f6 0b 	sts	0x0BF6, r25	; 0x800bf6 <pxDelayedTaskList+0x1>
    1aac:	80 93 f5 0b 	sts	0x0BF5, r24	; 0x800bf5 <pxDelayedTaskList>
    1ab0:	8a ee       	ldi	r24, 0xEA	; 234
    1ab2:	9b e0       	ldi	r25, 0x0B	; 11
    1ab4:	90 93 f8 0b 	sts	0x0BF8, r25	; 0x800bf8 <pxOverflowDelayedTaskList+0x1>
    1ab8:	80 93 f7 0b 	sts	0x0BF7, r24	; 0x800bf7 <pxOverflowDelayedTaskList>
    1abc:	00 00       	nop
    1abe:	0f 90       	pop	r0
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <prvAddCurrentTaskToDelayedList>:
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <prvAddCurrentTaskToDelayedList+0x6>
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <prvAddCurrentTaskToDelayedList+0x8>
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	69 83       	std	Y+1, r22	; 0x01
    1ad4:	7a 83       	std	Y+2, r23	; 0x02
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	20 91 b1 0b 	lds	r18, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    1ade:	30 91 b2 0b 	lds	r19, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ae8:	bc 81       	ldd	r27, Y+4	; 0x04
    1aea:	f9 01       	movw	r30, r18
    1aec:	82 83       	std	Z+2, r24	; 0x02
    1aee:	93 83       	std	Z+3, r25	; 0x03
    1af0:	a4 83       	std	Z+4, r26	; 0x04
    1af2:	b5 83       	std	Z+5, r27	; 0x05
    1af4:	80 91 05 0c 	lds	r24, 0x0C05	; 0x800c05 <xTickCount>
    1af8:	90 91 06 0c 	lds	r25, 0x0C06	; 0x800c06 <xTickCount+0x1>
    1afc:	a0 91 07 0c 	lds	r26, 0x0C07	; 0x800c07 <xTickCount+0x2>
    1b00:	b0 91 08 0c 	lds	r27, 0x0C08	; 0x800c08 <xTickCount+0x3>
    1b04:	29 81       	ldd	r18, Y+1	; 0x01
    1b06:	3a 81       	ldd	r19, Y+2	; 0x02
    1b08:	4b 81       	ldd	r20, Y+3	; 0x03
    1b0a:	5c 81       	ldd	r21, Y+4	; 0x04
    1b0c:	28 17       	cp	r18, r24
    1b0e:	39 07       	cpc	r19, r25
    1b10:	4a 07       	cpc	r20, r26
    1b12:	5b 07       	cpc	r21, r27
    1b14:	78 f4       	brcc	.+30     	; 0x1b34 <prvAddCurrentTaskToDelayedList+0x6e>
    1b16:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    1b1a:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    1b1e:	9c 01       	movw	r18, r24
    1b20:	2e 5f       	subi	r18, 0xFE	; 254
    1b22:	3f 4f       	sbci	r19, 0xFF	; 255
    1b24:	80 91 f7 0b 	lds	r24, 0x0BF7	; 0x800bf7 <pxOverflowDelayedTaskList>
    1b28:	90 91 f8 0b 	lds	r25, 0x0BF8	; 0x800bf8 <pxOverflowDelayedTaskList+0x1>
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <vListInsert>
    1b32:	2b c0       	rjmp	.+86     	; 0x1b8a <prvAddCurrentTaskToDelayedList+0xc4>
    1b34:	80 91 b1 0b 	lds	r24, 0x0BB1	; 0x800bb1 <pxCurrentTCB>
    1b38:	90 91 b2 0b 	lds	r25, 0x0BB2	; 0x800bb2 <pxCurrentTCB+0x1>
    1b3c:	9c 01       	movw	r18, r24
    1b3e:	2e 5f       	subi	r18, 0xFE	; 254
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
    1b42:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <pxDelayedTaskList>
    1b46:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <pxDelayedTaskList+0x1>
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <vListInsert>
    1b50:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
    1b54:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
    1b58:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <xNextTaskUnblockTime+0x2>
    1b5c:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <xNextTaskUnblockTime+0x3>
    1b60:	29 81       	ldd	r18, Y+1	; 0x01
    1b62:	3a 81       	ldd	r19, Y+2	; 0x02
    1b64:	4b 81       	ldd	r20, Y+3	; 0x03
    1b66:	5c 81       	ldd	r21, Y+4	; 0x04
    1b68:	28 17       	cp	r18, r24
    1b6a:	39 07       	cpc	r19, r25
    1b6c:	4a 07       	cpc	r20, r26
    1b6e:	5b 07       	cpc	r21, r27
    1b70:	60 f4       	brcc	.+24     	; 0x1b8a <prvAddCurrentTaskToDelayedList+0xc4>
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	ab 81       	ldd	r26, Y+3	; 0x03
    1b78:	bc 81       	ldd	r27, Y+4	; 0x04
    1b7a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
    1b7e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
    1b82:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <xNextTaskUnblockTime+0x2>
    1b86:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <xNextTaskUnblockTime+0x3>
    1b8a:	00 00       	nop
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	08 95       	ret

00001b9a <prvAllocateTCBAndStack>:
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <prvAllocateTCBAndStack+0x6>
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <prvAllocateTCBAndStack+0x8>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <prvAllocateTCBAndStack+0xa>
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	7e 83       	std	Y+6, r23	; 0x06
    1bae:	6d 83       	std	Y+5, r22	; 0x05
    1bb0:	89 e2       	ldi	r24, 0x29	; 41
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 c6 01 	call	0x38c	; 0x38c <pvPortMalloc>
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc0:	89 2b       	or	r24, r25
    1bc2:	51 f1       	breq	.+84     	; 0x1c18 <prvAllocateTCBAndStack+0x7e>
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	89 2b       	or	r24, r25
    1bca:	29 f4       	brne	.+10     	; 0x1bd6 <prvAllocateTCBAndStack+0x3c>
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	0e 94 c6 01 	call	0x38c	; 0x38c <pvPortMalloc>
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <prvAllocateTCBAndStack+0x40>
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	29 81       	ldd	r18, Y+1	; 0x01
    1bdc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bde:	f9 01       	movw	r30, r18
    1be0:	94 8f       	std	Z+28, r25	; 0x1c
    1be2:	83 8f       	std	Z+27, r24	; 0x1b
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	fc 01       	movw	r30, r24
    1bea:	83 8d       	ldd	r24, Z+27	; 0x1b
    1bec:	94 8d       	ldd	r25, Z+28	; 0x1c
    1bee:	89 2b       	or	r24, r25
    1bf0:	39 f4       	brne	.+14     	; 0x1c00 <prvAllocateTCBAndStack+0x66>
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	0e 94 b5 02 	call	0x56a	; 0x56a <vPortFree>
    1bfa:	1a 82       	std	Y+2, r1	; 0x02
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	0c c0       	rjmp	.+24     	; 0x1c18 <prvAllocateTCBAndStack+0x7e>
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	fc 01       	movw	r30, r24
    1c06:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c08:	94 8d       	ldd	r25, Z+28	; 0x1c
    1c0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0e:	a9 01       	movw	r20, r18
    1c10:	65 ea       	ldi	r22, 0xA5	; 165
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <memset>
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	26 96       	adiw	r28, 0x06	; 6
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	08 95       	ret

00001c2e <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <prvResetNextTaskUnblockTime+0x6>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1c38:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <pxDelayedTaskList>
    1c3c:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <pxDelayedTaskList+0x1>
    1c40:	fc 01       	movw	r30, r24
    1c42:	80 81       	ld	r24, Z
    1c44:	88 23       	and	r24, r24
    1c46:	61 f4       	brne	.+24     	; 0x1c60 <prvResetNextTaskUnblockTime+0x32>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
    1c52:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
    1c56:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <xNextTaskUnblockTime+0x2>
    1c5a:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <xNextTaskUnblockTime+0x3>
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
    1c5e:	1b c0       	rjmp	.+54     	; 0x1c96 <prvResetNextTaskUnblockTime+0x68>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1c60:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <pxDelayedTaskList>
    1c64:	90 91 f6 0b 	lds	r25, 0x0BF6	; 0x800bf6 <pxDelayedTaskList+0x1>
    1c68:	fc 01       	movw	r30, r24
    1c6a:	87 81       	ldd	r24, Z+7	; 0x07
    1c6c:	90 85       	ldd	r25, Z+8	; 0x08
    1c6e:	fc 01       	movw	r30, r24
    1c70:	80 85       	ldd	r24, Z+8	; 0x08
    1c72:	91 85       	ldd	r25, Z+9	; 0x09
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	a4 81       	ldd	r26, Z+4	; 0x04
    1c84:	b5 81       	ldd	r27, Z+5	; 0x05
    1c86:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
    1c8a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
    1c8e:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <xNextTaskUnblockTime+0x2>
    1c92:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <xNextTaskUnblockTime+0x3>
	}
}
    1c96:	00 00       	nop
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <main>:
#include "ATMega/mega_comm_task.h"

#define nullptr NULL
const uint8_t N_MULTI_TASKS = 8;

int main() {
    1ca2:	8f 92       	push	r8
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	cf 92       	push	r12
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <main+0x18>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    static semi_truck_data_t semi_truck_data = {0};
	//TaskShare<semi_truck_data_t> *semi_data = new TaskShare<semi_truck_data_t>("semi data");
    
    // rs232 *p_ser_port = new rs232 (9600, 1);
	// SERVOS
    fifth_wheel *fifth = new fifth_wheel("fifth_wheel", 1, 200, nullptr, &semi_truck_data, &OCR1A, (uint8_t)5);
    1cbe:	8a e1       	ldi	r24, 0x1A	; 26
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_Znwj>
    1cc6:	4c 01       	movw	r8, r24
    1cc8:	0f 2e       	mov	r0, r31
    1cca:	f5 e0       	ldi	r31, 0x05	; 5
    1ccc:	af 2e       	mov	r10, r31
    1cce:	f0 2d       	mov	r31, r0
    1cd0:	0f 2e       	mov	r0, r31
    1cd2:	fa e4       	ldi	r31, 0x4A	; 74
    1cd4:	cf 2e       	mov	r12, r31
    1cd6:	d1 2c       	mov	r13, r1
    1cd8:	f0 2d       	mov	r31, r0
    1cda:	0f 2e       	mov	r0, r31
    1cdc:	f0 e1       	ldi	r31, 0x10	; 16
    1cde:	ef 2e       	mov	r14, r31
    1ce0:	fc e0       	ldi	r31, 0x0C	; 12
    1ce2:	ff 2e       	mov	r15, r31
    1ce4:	f0 2d       	mov	r31, r0
    1ce6:	00 e0       	ldi	r16, 0x00	; 0
    1ce8:	10 e0       	ldi	r17, 0x00	; 0
    1cea:	28 ec       	ldi	r18, 0xC8	; 200
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	41 e0       	ldi	r20, 0x01	; 1
    1cf0:	66 e0       	ldi	r22, 0x06	; 6
    1cf2:	71 e0       	ldi	r23, 0x01	; 1
    1cf4:	c4 01       	movw	r24, r8
    1cf6:	0e 94 65 00 	call	0xca	; 0xca <_ZN11fifth_wheelC1EPKchjP8emstreamP17semi_truck_data_tPVjh>
    1cfa:	9a 82       	std	Y+2, r9	; 0x02
    1cfc:	89 82       	std	Y+1, r8	; 0x01
	while (true);
    1cfe:	ff cf       	rjmp	.-2      	; 0x1cfe <main+0x5c>

00001d00 <memset>:
    1d00:	dc 01       	movw	r26, r24
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <memset+0x6>
    1d04:	6d 93       	st	X+, r22
    1d06:	41 50       	subi	r20, 0x01	; 1
    1d08:	50 40       	sbci	r21, 0x00	; 0
    1d0a:	e0 f7       	brcc	.-8      	; 0x1d04 <memset+0x4>
    1d0c:	08 95       	ret

00001d0e <strlen>:
    1d0e:	fc 01       	movw	r30, r24
    1d10:	01 90       	ld	r0, Z+
    1d12:	00 20       	and	r0, r0
    1d14:	e9 f7       	brne	.-6      	; 0x1d10 <strlen+0x2>
    1d16:	80 95       	com	r24
    1d18:	90 95       	com	r25
    1d1a:	8e 0f       	add	r24, r30
    1d1c:	9f 1f       	adc	r25, r31
    1d1e:	08 95       	ret

00001d20 <_exit>:
    1d20:	f8 94       	cli

00001d22 <__stop_program>:
    1d22:	ff cf       	rjmp	.-2      	; 0x1d22 <__stop_program>
